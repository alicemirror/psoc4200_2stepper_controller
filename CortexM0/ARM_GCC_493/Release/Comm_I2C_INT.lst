ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Comm_I2C_INT.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.Comm_I2C_ISR,"ax",%progbits
  18              		.align	1
  19              		.global	Comm_I2C_ISR
  20              		.code	16
  21              		.thumb_func
  22              		.type	Comm_I2C_ISR, %function
  23              	Comm_I2C_ISR:
  24              	.LFB0:
  25              		.file 1 "Generated_Source\\PSoC4\\Comm_I2C_INT.c"
   1:Generated_Source\PSoC4/Comm_I2C_INT.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/Comm_I2C_INT.c **** * \file Comm_I2C_INT.c
   3:Generated_Source\PSoC4/Comm_I2C_INT.c **** * \version 3.20
   4:Generated_Source\PSoC4/Comm_I2C_INT.c **** *
   5:Generated_Source\PSoC4/Comm_I2C_INT.c **** * \brief
   6:Generated_Source\PSoC4/Comm_I2C_INT.c **** *  This file provides the source code to the Interrupt Service Routine for
   7:Generated_Source\PSoC4/Comm_I2C_INT.c **** *  the SCB Component in I2C mode.
   8:Generated_Source\PSoC4/Comm_I2C_INT.c **** *
   9:Generated_Source\PSoC4/Comm_I2C_INT.c **** * Note:
  10:Generated_Source\PSoC4/Comm_I2C_INT.c **** *
  11:Generated_Source\PSoC4/Comm_I2C_INT.c **** ********************************************************************************
  12:Generated_Source\PSoC4/Comm_I2C_INT.c **** * \copyright
  13:Generated_Source\PSoC4/Comm_I2C_INT.c **** * Copyright 2013-2016, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/Comm_I2C_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/Comm_I2C_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/Comm_I2C_INT.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/Comm_I2C_INT.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
  19:Generated_Source\PSoC4/Comm_I2C_INT.c **** #include "Comm_PVT.h"
  20:Generated_Source\PSoC4/Comm_I2C_INT.c **** #include "Comm_I2C_PVT.h"
  21:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
  22:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
  23:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
  24:Generated_Source\PSoC4/Comm_I2C_INT.c **** /*******************************************************************************
  25:Generated_Source\PSoC4/Comm_I2C_INT.c **** * Function Name: Comm_I2C_ISR
  26:Generated_Source\PSoC4/Comm_I2C_INT.c **** ****************************************************************************//**
  27:Generated_Source\PSoC4/Comm_I2C_INT.c **** *
  28:Generated_Source\PSoC4/Comm_I2C_INT.c **** *  Handles the Interrupt Service Routine for the SCB I2C mode.
  29:Generated_Source\PSoC4/Comm_I2C_INT.c **** *
  30:Generated_Source\PSoC4/Comm_I2C_INT.c **** *******************************************************************************/
  31:Generated_Source\PSoC4/Comm_I2C_INT.c **** CY_ISR(Comm_I2C_ISR)
  32:Generated_Source\PSoC4/Comm_I2C_INT.c **** {
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 2


  26              		.loc 1 32 0
  27              		.cfi_startproc
  28              	.LVL0:
  33:Generated_Source\PSoC4/Comm_I2C_INT.c ****     uint32 diffCount;
  34:Generated_Source\PSoC4/Comm_I2C_INT.c ****     uint32 endTransfer;
  35:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
  36:Generated_Source\PSoC4/Comm_I2C_INT.c **** #ifdef Comm_I2C_ISR_ENTRY_CALLBACK
  37:Generated_Source\PSoC4/Comm_I2C_INT.c ****     Comm_I2C_ISR_EntryCallback();
  38:Generated_Source\PSoC4/Comm_I2C_INT.c **** #endif /* Comm_I2C_ISR_ENTRY_CALLBACK */
  39:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
  40:Generated_Source\PSoC4/Comm_I2C_INT.c **** #if (Comm_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
  41:Generated_Source\PSoC4/Comm_I2C_INT.c ****     uint32 response;
  42:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
  43:Generated_Source\PSoC4/Comm_I2C_INT.c ****     response = Comm_I2C_ACK_ADDR;
  44:Generated_Source\PSoC4/Comm_I2C_INT.c **** #endif /* (Comm_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
  45:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
  46:Generated_Source\PSoC4/Comm_I2C_INT.c ****     endTransfer = 0u; /* Continue active transfer */
  47:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
  48:Generated_Source\PSoC4/Comm_I2C_INT.c ****     /* Calls customer routine if registered */
  49:Generated_Source\PSoC4/Comm_I2C_INT.c ****     if(NULL != Comm_customIntrHandler)
  29              		.loc 1 49 0
  30 0000 C44B     		ldr	r3, .L164
  32:Generated_Source\PSoC4/Comm_I2C_INT.c ****     uint32 diffCount;
  31              		.loc 1 32 0
  32 0002 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
  33              		.cfi_def_cfa_offset 32
  34              		.cfi_offset 0, -32
  35              		.cfi_offset 1, -28
  36              		.cfi_offset 2, -24
  37              		.cfi_offset 4, -20
  38              		.cfi_offset 5, -16
  39              		.cfi_offset 6, -12
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42              		.loc 1 49 0
  43 0004 1B68     		ldr	r3, [r3]
  44 0006 002B     		cmp	r3, #0
  45 0008 00D0     		beq	.L2
  50:Generated_Source\PSoC4/Comm_I2C_INT.c ****     {
  51:Generated_Source\PSoC4/Comm_I2C_INT.c ****         Comm_customIntrHandler();
  46              		.loc 1 51 0
  47 000a 9847     		blx	r3
  48              	.LVL1:
  49              	.L2:
  52:Generated_Source\PSoC4/Comm_I2C_INT.c ****     }
  53:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
  54:Generated_Source\PSoC4/Comm_I2C_INT.c ****     if(Comm_CHECK_INTR_I2C_EC_MASKED(Comm_INTR_I2C_EC_WAKE_UP))
  50              		.loc 1 54 0
  51 000c C24B     		ldr	r3, .L164+4
  52 000e 1B68     		ldr	r3, [r3]
  53 0010 DB07     		lsl	r3, r3, #31
  54 0012 02D5     		bpl	.L3
  55:Generated_Source\PSoC4/Comm_I2C_INT.c ****     {
  56:Generated_Source\PSoC4/Comm_I2C_INT.c ****         /* Mask-off after wakeup */
  57:Generated_Source\PSoC4/Comm_I2C_INT.c ****         Comm_SetI2CExtClkInterruptMode(Comm_NO_INTR_SOURCES);
  55              		.loc 1 57 0
  56 0014 0022     		mov	r2, #0
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 3


  57 0016 C14B     		ldr	r3, .L164+8
  58 0018 1A60     		str	r2, [r3]
  59              	.L3:
  58:Generated_Source\PSoC4/Comm_I2C_INT.c ****     }
  59:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
  60:Generated_Source\PSoC4/Comm_I2C_INT.c ****     /* Master and Slave error tracking:
  61:Generated_Source\PSoC4/Comm_I2C_INT.c ****     * Add the master state check to track only the master errors when the master is active or
  62:Generated_Source\PSoC4/Comm_I2C_INT.c ****     * track slave errors when the slave is active or idle.
  63:Generated_Source\PSoC4/Comm_I2C_INT.c ****     * A special MMS case: in the address phase with misplaced Start: the master sets the LOST_ARB a
  64:Generated_Source\PSoC4/Comm_I2C_INT.c ****     * slave BUS_ERR. The valid event is LOST_ARB comes from the master.
  65:Generated_Source\PSoC4/Comm_I2C_INT.c ****     */
  66:Generated_Source\PSoC4/Comm_I2C_INT.c ****     if(Comm_CHECK_I2C_FSM_MASTER)
  60              		.loc 1 66 0
  61 001a 2021     		mov	r1, #32
  62 001c C04C     		ldr	r4, .L164+12
  63 001e C148     		ldr	r0, .L164+16
  64 0020 2378     		ldrb	r3, [r4]
  65 0022 0B42     		tst	r3, r1
  66 0024 57D0     		beq	.L4
  67:Generated_Source\PSoC4/Comm_I2C_INT.c ****     {
  68:Generated_Source\PSoC4/Comm_I2C_INT.c ****         if(Comm_I2C_MASTER)
  67              		.loc 1 68 0
  68 0026 0578     		ldrb	r5, [r0]
  69 0028 AB07     		lsl	r3, r5, #30
  70 002a 01D4     		bmi	.L5
  71              	.LVL2:
  72              	.L13:
  46:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
  73              		.loc 1 46 0
  74 002c 0023     		mov	r3, #0
  75 002e 70E0     		b	.L6
  76              	.LVL3:
  77              	.L5:
  69:Generated_Source\PSoC4/Comm_I2C_INT.c ****         {
  70:Generated_Source\PSoC4/Comm_I2C_INT.c ****             /* INTR_MASTER_I2C_BUS_ERROR:
  71:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * A misplaced Start or Stop condition occurred on the bus: complete the transaction.
  72:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * The interrupt is cleared in I2C_FSM_EXIT_IDLE.
  73:Generated_Source\PSoC4/Comm_I2C_INT.c ****             */
  74:Generated_Source\PSoC4/Comm_I2C_INT.c ****             if(Comm_CHECK_INTR_MASTER_MASKED(Comm_INTR_MASTER_I2C_BUS_ERROR))
  78              		.loc 1 74 0
  79 0030 BD4A     		ldr	r2, .L164+20
  46:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
  80              		.loc 1 46 0
  81 0032 0023     		mov	r3, #0
  82              		.loc 1 74 0
  83 0034 1168     		ldr	r1, [r2]
  84 0036 0192     		str	r2, [sp, #4]
  85 0038 CA05     		lsl	r2, r1, #23
  86 003a 06D5     		bpl	.L7
  75:Generated_Source\PSoC4/Comm_I2C_INT.c ****             {
  76:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_mstrStatus |= (uint16) (Comm_I2C_MSTAT_ERR_XFER |
  87              		.loc 1 76 0
  88 003c C026     		mov	r6, #192
  89 003e BB49     		ldr	r1, .L164+24
  90 0040 B600     		lsl	r6, r6, #2
  91 0042 0B88     		ldrh	r3, [r1]
  92 0044 3343     		orr	r3, r6
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 4


  93 0046 0B80     		strh	r3, [r1]
  94              	.LVL4:
  77:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                                          Comm_I2C_MSTAT_ERR_BUS_ERROR);
  78:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
  79:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 endTransfer = Comm_I2C_CMPLT_ANY_TRANSFER;
  95              		.loc 1 79 0
  96 0048 0123     		mov	r3, #1
  97              	.LVL5:
  98              	.L7:
  80:Generated_Source\PSoC4/Comm_I2C_INT.c ****             }
  81:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
  82:Generated_Source\PSoC4/Comm_I2C_INT.c ****             /* INTR_MASTER_I2C_ARB_LOST:
  83:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * The MultiMaster lost arbitrage during transaction.
  84:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * A Misplaced Start or Stop condition is treated as lost arbitration when the master dr
  85:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * The interrupt source is cleared in I2C_FSM_EXIT_IDLE.
  86:Generated_Source\PSoC4/Comm_I2C_INT.c ****             */
  87:Generated_Source\PSoC4/Comm_I2C_INT.c ****             if(Comm_CHECK_INTR_MASTER_MASKED(Comm_INTR_MASTER_I2C_ARB_LOST))
  99              		.loc 1 87 0
 100 004a 0121     		mov	r1, #1
 101 004c 019A     		ldr	r2, [sp, #4]
 102 004e 1668     		ldr	r6, [r2]
 103 0050 0E42     		tst	r6, r1
 104 0052 09D0     		beq	.L8
  88:Generated_Source\PSoC4/Comm_I2C_INT.c ****             {
  89:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_mstrStatus |= (uint16) (Comm_I2C_MSTAT_ERR_XFER |
 105              		.loc 1 89 0
 106 0054 9027     		mov	r7, #144
 107 0056 B54E     		ldr	r6, .L164+24
 108 0058 BF00     		lsl	r7, r7, #2
 109 005a 3388     		ldrh	r3, [r6]
 110              	.LVL6:
 111 005c 3B43     		orr	r3, r7
 112 005e 3380     		strh	r3, [r6]
 113              	.LVL7:
  90:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                                          Comm_I2C_MSTAT_ERR_ARB_LOST);
  91:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
  92:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 endTransfer = Comm_I2C_CMPLT_ANY_TRANSFER;
  93:Generated_Source\PSoC4/Comm_I2C_INT.c ****             }
  94:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
  95:Generated_Source\PSoC4/Comm_I2C_INT.c ****             if(Comm_I2C_MULTI_MASTER_SLAVE)
 114              		.loc 1 95 0
 115 0060 072D     		cmp	r5, #7
 116 0062 10D1     		bne	.L10
  92:Generated_Source\PSoC4/Comm_I2C_INT.c ****             }
 117              		.loc 1 92 0
 118 0064 0B1C     		mov	r3, r1
 119 0066 01E0     		b	.L9
 120              	.LVL8:
 121              	.L8:
 122              		.loc 1 95 0
 123 0068 072D     		cmp	r5, #7
 124 006a 0AD1     		bne	.L11
 125              	.LVL9:
 126              	.L9:
  96:Generated_Source\PSoC4/Comm_I2C_INT.c ****             {
  97:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 /* I2C_MASTER_CMD_M_START_ON_IDLE:
  98:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 * MultiMaster-Slave does not generate start, because Slave was addressed.
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 5


  99:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 * Pass control to slave.
 100:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 */
 101:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 if(Comm_CHECK_I2C_MASTER_CMD(Comm_I2C_MASTER_CMD_M_START_ON_IDLE))
 127              		.loc 1 101 0
 128 006c B049     		ldr	r1, .L164+28
 129 006e 0968     		ldr	r1, [r1]
 130 0070 8A07     		lsl	r2, r1, #30
 131 0072 06D5     		bpl	.L11
 102:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 103:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_mstrStatus |= (uint16) (Comm_I2C_MSTAT_ERR_XFER |
 132              		.loc 1 103 0
 133 0074 A026     		mov	r6, #160
 134 0076 AD49     		ldr	r1, .L164+24
 135 0078 B600     		lsl	r6, r6, #2
 136 007a 0B88     		ldrh	r3, [r1]
 137 007c 3343     		orr	r3, r6
 138 007e 0B80     		strh	r3, [r1]
 139              	.LVL10:
 140 0080 01E0     		b	.L10
 141              	.LVL11:
 142              	.L11:
 104:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                                              Comm_I2C_MSTAT_ERR_ABORT_XFER);
 105:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 106:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     endTransfer = Comm_I2C_CMPLT_ANY_TRANSFER;
 107:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 108:Generated_Source\PSoC4/Comm_I2C_INT.c ****             }
 109:Generated_Source\PSoC4/Comm_I2C_INT.c ****             
 110:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 111:Generated_Source\PSoC4/Comm_I2C_INT.c ****             /* The error handling common part:
 112:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * Sets a completion flag of the master transaction and passes control to:
 113:Generated_Source\PSoC4/Comm_I2C_INT.c ****             *  - I2C_FSM_EXIT_IDLE - to complete transaction in case of: ARB_LOST or BUS_ERR.
 114:Generated_Source\PSoC4/Comm_I2C_INT.c ****             *  - I2C_FSM_IDLE      - to take chance for the slave to process incoming transaction.
 115:Generated_Source\PSoC4/Comm_I2C_INT.c ****             */
 116:Generated_Source\PSoC4/Comm_I2C_INT.c ****             if(0u != endTransfer)
 143              		.loc 1 116 0
 144 0082 002B     		cmp	r3, #0
 145 0084 D2D0     		beq	.L13
 146              	.LVL12:
 147              	.L10:
 117:Generated_Source\PSoC4/Comm_I2C_INT.c ****             {
 118:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 /* Set completion flags for master */
 119:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_mstrStatus |= (uint16) Comm_GET_I2C_MSTAT_CMPLT;
 148              		.loc 1 119 0
 149 0086 0123     		mov	r3, #1
 150 0088 0226     		mov	r6, #2
 151 008a 2178     		ldrb	r1, [r4]
 152 008c A74F     		ldr	r7, .L164+24
 153 008e 1940     		and	r1, r3
 154 0090 711A     		sub	r1, r6, r1
 155 0092 8C46     		mov	ip, r1
 156 0094 6246     		mov	r2, ip
 157 0096 3988     		ldrh	r1, [r7]
 158 0098 1143     		orr	r1, r2
 159 009a 89B2     		uxth	r1, r1
 160 009c 3980     		strh	r1, [r7]
 120:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 121:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 if(Comm_I2C_MULTI_MASTER_SLAVE)
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 6


 161              		.loc 1 121 0
 162 009e 072D     		cmp	r5, #7
 163 00a0 16D1     		bne	.L15
 122:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 123:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     if(Comm_CHECK_I2C_FSM_ADDR)
 164              		.loc 1 123 0
 165 00a2 0821     		mov	r1, #8
 166 00a4 2578     		ldrb	r5, [r4]
 167 00a6 2940     		and	r1, r5
 168 00a8 10D0     		beq	.L16
 124:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     {
 125:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         /* Start generation is set after another master starts accessing Slave.
 126:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         * Clean-up master and turn to slave. Set state to IDLE.
 127:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         */
 128:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         if(Comm_CHECK_I2C_MASTER_CMD(Comm_I2C_MASTER_CMD_M_START_ON_IDLE))
 169              		.loc 1 128 0
 170 00aa A149     		ldr	r1, .L164+28
 171 00ac 0D68     		ldr	r5, [r1]
 172 00ae 3542     		tst	r5, r6
 173 00b0 02D0     		beq	.L17
 129:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         {
 130:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_I2C_MASTER_CLEAR_START;
 174              		.loc 1 130 0
 175 00b2 0023     		mov	r3, #0
 176 00b4 0B60     		str	r3, [r1]
 177              	.LVL13:
 178 00b6 EFE2     		b	.L18
 179              	.LVL14:
 180              	.L17:
 131:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 132:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             endTransfer = Comm_I2C_CMPLT_ANY_TRANSFER; /* Pass control to Slave */
 133:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 134:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         /* Valid arbitration lost on the address phase happens only when: master LO
 135:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         * slave BUS_ERR is cleared. Only in that case set the state to IDLE without
 136:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         */
 137:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         else if((!Comm_CHECK_INTR_SLAVE_MASKED(Comm_INTR_SLAVE_I2C_BUS_ERROR))
 181              		.loc 1 137 0
 182 00b8 9E49     		ldr	r1, .L164+32
 183 00ba 0968     		ldr	r1, [r1]
 184 00bc CA05     		lsl	r2, r1, #23
 185 00be 26D4     		bmi	.L155
 138:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                && Comm_CHECK_INTR_MASTER_MASKED(Comm_INTR_MASTER_I2C_ARB_LOST))
 186              		.loc 1 138 0
 187 00c0 019A     		ldr	r2, [sp, #4]
 188 00c2 1268     		ldr	r2, [r2]
 189 00c4 1A42     		tst	r2, r3
 190 00c6 00D0     		beq	.LCB182
 191 00c8 E6E2     		b	.L18	@long jump
 192              	.LCB182:
 193 00ca 20E0     		b	.L155
 194              	.L16:
 139:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         {
 140:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             endTransfer = Comm_I2C_CMPLT_ANY_TRANSFER; /* Pass control to Slave */
 141:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 142:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         else
 143:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         {
 144:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             endTransfer = 0u; /* Causes I2C_FSM_EXIT_IDLE to be set below */
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 7


 145:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 146:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 147:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         if(0u != endTransfer) /* Clean-up master to proceed with slave */
 148:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         {
 149:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_CLEAR_TX_FIFO; /* Shifter keeps address, clear it */
 150:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 151:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_DISABLE_MASTER_AUTO_DATA_ACK; /* In case of reading disable autoAC
 152:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 153:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             /* Clean-up master interrupt sources */
 154:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_ClearMasterInterruptSource(Comm_INTR_MASTER_ALL);
 155:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 156:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             /* Disable data processing interrupts: they have to be cleared before *
 157:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_SetRxInterruptMode(Comm_NO_INTR_SOURCES);
 158:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_SetTxInterruptMode(Comm_NO_INTR_SOURCES);
 159:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 160:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_state = Comm_I2C_FSM_IDLE;
 161:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 162:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         else
 163:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         {
 164:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             /* Set I2C_FSM_EXIT_IDLE for BUS_ERR and ARB_LOST (that is really bus e
 165:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_state = Comm_I2C_FSM_EXIT_IDLE;
 166:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 167:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     }
 168:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     else
 169:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     {
 170:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         /* Set I2C_FSM_EXIT_IDLE if any other state than address */
 171:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         Comm_state = Comm_I2C_FSM_EXIT_IDLE;
 195              		.loc 1 171 0
 196 00cc 2170     		strb	r1, [r4]
 197 00ce 20E0     		b	.L6
 198              	.L15:
 172:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     }
 173:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 174:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 else
 175:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 176:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* In case of LOST*/
 177:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_state = Comm_I2C_FSM_EXIT_IDLE;
 199              		.loc 1 177 0
 200 00d0 0022     		mov	r2, #0
 201 00d2 2270     		strb	r2, [r4]
 202 00d4 1DE0     		b	.L6
 203              	.LVL15:
 204              	.L4:
 178:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 179:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 
 180:Generated_Source\PSoC4/Comm_I2C_INT.c ****             }
 181:Generated_Source\PSoC4/Comm_I2C_INT.c ****         }
 182:Generated_Source\PSoC4/Comm_I2C_INT.c ****         
 183:Generated_Source\PSoC4/Comm_I2C_INT.c ****     }
 184:Generated_Source\PSoC4/Comm_I2C_INT.c ****     else /* (Comm_CHECK_I2C_FSM_SLAVE) */
 185:Generated_Source\PSoC4/Comm_I2C_INT.c ****     {
 186:Generated_Source\PSoC4/Comm_I2C_INT.c ****         if(Comm_I2C_SLAVE)
 205              		.loc 1 186 0
 206 00d6 0122     		mov	r2, #1
 207 00d8 0378     		ldrb	r3, [r0]
 208 00da 1342     		tst	r3, r2
 209 00dc A6D0     		beq	.L13
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 8


 187:Generated_Source\PSoC4/Comm_I2C_INT.c ****         {
 188:Generated_Source\PSoC4/Comm_I2C_INT.c ****             /* INTR_SLAVE_I2C_BUS_ERROR or Comm_INTR_SLAVE_I2C_ARB_LOST:
 189:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * A Misplaced Start or Stop condition occurred on the bus: set a flag
 190:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * to notify an error condition.
 191:Generated_Source\PSoC4/Comm_I2C_INT.c ****             */
 192:Generated_Source\PSoC4/Comm_I2C_INT.c ****             if(Comm_CHECK_INTR_SLAVE_MASKED(Comm_INTR_SLAVE_I2C_BUS_ERROR |
 210              		.loc 1 192 0
 211 00de 954B     		ldr	r3, .L164+32
 212 00e0 1D68     		ldr	r5, [r3]
 213 00e2 0223     		mov	r3, #2
 214 00e4 FF33     		add	r3, r3, #255
 215 00e6 1D42     		tst	r5, r3
 216 00e8 A0D0     		beq	.L13
 193:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                                         Comm_INTR_SLAVE_I2C_ARB_LOST))
 194:Generated_Source\PSoC4/Comm_I2C_INT.c ****             {
 195:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 if(Comm_CHECK_I2C_FSM_RD)
 217              		.loc 1 195 0
 218 00ea 2578     		ldrb	r5, [r4]
 219 00ec 924B     		ldr	r3, .L164+36
 220 00ee 1542     		tst	r5, r2
 221 00f0 06D0     		beq	.L20
 196:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 197:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* TX direction: master reads from slave */
 198:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_slStatus &= (uint8) ~Comm_I2C_SSTAT_RD_BUSY;
 222              		.loc 1 198 0
 223 00f2 0221     		mov	r1, #2
 224 00f4 1A78     		ldrb	r2, [r3]
 225 00f6 8A43     		bic	r2, r1
 226 00f8 1A70     		strb	r2, [r3]
 199:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_slStatus |= (uint8) (Comm_I2C_SSTAT_RD_ERR |
 227              		.loc 1 199 0
 228 00fa 1A78     		ldrb	r2, [r3]
 229 00fc 0731     		add	r1, r1, #7
 230 00fe 04E0     		b	.L154
 231              	.L20:
 200:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                                           Comm_I2C_SSTAT_RD_CMPLT);
 201:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 202:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 else
 203:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 204:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* RX direction: master writes into slave */
 205:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_slStatus &= (uint8) ~Comm_I2C_SSTAT_WR_BUSY;
 232              		.loc 1 205 0
 233 0100 1A78     		ldrb	r2, [r3]
 234 0102 8A43     		bic	r2, r1
 235 0104 1A70     		strb	r2, [r3]
 206:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_slStatus |= (uint8) (Comm_I2C_SSTAT_WR_ERR |
 236              		.loc 1 206 0
 237 0106 9022     		mov	r2, #144
 238 0108 1978     		ldrb	r1, [r3]
 239              	.L154:
 240 010a 0A43     		orr	r2, r1
 241 010c 1A70     		strb	r2, [r3]
 242              	.LVL16:
 243              	.L155:
 207:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                                           Comm_I2C_SSTAT_WR_CMPLT);
 208:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 209:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 9


 210:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_state = Comm_I2C_FSM_EXIT_IDLE;
 244              		.loc 1 210 0
 245 010e 0023     		mov	r3, #0
 246 0110 2370     		strb	r3, [r4]
 247              	.L6:
 248              	.LVL17:
 211:Generated_Source\PSoC4/Comm_I2C_INT.c ****             }
 212:Generated_Source\PSoC4/Comm_I2C_INT.c ****         }
 213:Generated_Source\PSoC4/Comm_I2C_INT.c ****         
 214:Generated_Source\PSoC4/Comm_I2C_INT.c ****     }
 215:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 216:Generated_Source\PSoC4/Comm_I2C_INT.c ****     /* States description:
 217:Generated_Source\PSoC4/Comm_I2C_INT.c ****     * Any Master operation starts from: the ADDR_RD/WR state as the master generates traffic on the
 218:Generated_Source\PSoC4/Comm_I2C_INT.c ****     * Any Slave operation starts from: the IDLE state as the slave always waits for actions from th
 219:Generated_Source\PSoC4/Comm_I2C_INT.c ****     */
 220:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 221:Generated_Source\PSoC4/Comm_I2C_INT.c ****     /* FSM Master */
 222:Generated_Source\PSoC4/Comm_I2C_INT.c ****     if(Comm_CHECK_I2C_FSM_MASTER)
 249              		.loc 1 222 0
 250 0112 2278     		ldrb	r2, [r4]
 251 0114 9206     		lsl	r2, r2, #26
 252 0116 00D4     		bmi	.LCB260
 253 0118 44E1     		b	.L22	@long jump
 254              	.LCB260:
 223:Generated_Source\PSoC4/Comm_I2C_INT.c ****     {
 224:Generated_Source\PSoC4/Comm_I2C_INT.c ****         if(Comm_I2C_MASTER)
 255              		.loc 1 224 0
 256 011a 0278     		ldrb	r2, [r0]
 257 011c 0220     		mov	r0, #2
 258 011e 0242     		tst	r2, r0
 259 0120 00D1     		bne	.LCB266
 260 0122 D4E2     		b	.L1	@long jump
 261              	.LCB266:
 225:Generated_Source\PSoC4/Comm_I2C_INT.c ****         {
 226:Generated_Source\PSoC4/Comm_I2C_INT.c ****             /* INTR_MASTER_I2C_STOP:
 227:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * A Stop condition was generated by the master: the end of the transaction.
 228:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * Set completion flags to notify the API.
 229:Generated_Source\PSoC4/Comm_I2C_INT.c ****             */
 230:Generated_Source\PSoC4/Comm_I2C_INT.c ****             if(Comm_CHECK_INTR_MASTER_MASKED(Comm_INTR_MASTER_I2C_STOP))
 262              		.loc 1 230 0
 263 0124 1021     		mov	r1, #16
 264 0126 804A     		ldr	r2, .L164+20
 265 0128 1568     		ldr	r5, [r2]
 266 012a 0D42     		tst	r5, r1
 267 012c 0CD0     		beq	.L25
 231:Generated_Source\PSoC4/Comm_I2C_INT.c ****             {
 232:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_ClearMasterInterruptSource(Comm_INTR_MASTER_I2C_STOP);
 233:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 234:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_mstrStatus |= (uint16) Comm_GET_I2C_MSTAT_CMPLT;
 268              		.loc 1 234 0
 269 012e 0122     		mov	r2, #1
 232:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 270              		.loc 1 232 0
 271 0130 824B     		ldr	r3, .L164+40
 272              	.LVL18:
 273 0132 1960     		str	r1, [r3]
 274              		.loc 1 234 0
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 10


 275 0134 2378     		ldrb	r3, [r4]
 276 0136 1340     		and	r3, r2
 277 0138 C31A     		sub	r3, r0, r3
 278 013a 7C48     		ldr	r0, .L164+24
 279 013c 0288     		ldrh	r2, [r0]
 280 013e 1343     		orr	r3, r2
 281 0140 9BB2     		uxth	r3, r3
 282 0142 0380     		strh	r3, [r0]
 235:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_state       = Comm_I2C_FSM_IDLE;
 283              		.loc 1 235 0
 284 0144 2170     		strb	r1, [r4]
 285 0146 C2E2     		b	.L1
 286              	.LVL19:
 287              	.L25:
 236:Generated_Source\PSoC4/Comm_I2C_INT.c ****             }
 237:Generated_Source\PSoC4/Comm_I2C_INT.c ****             else
 238:Generated_Source\PSoC4/Comm_I2C_INT.c ****             {
 239:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 if(Comm_CHECK_I2C_FSM_ADDR) /* Address stage */
 288              		.loc 1 239 0
 289 0148 2578     		ldrb	r5, [r4]
 290 014a 2D07     		lsl	r5, r5, #28
 291 014c 1AD5     		bpl	.L27
 240:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 241:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* INTR_MASTER_I2C_NACK:
 242:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     * The master sent an address but it was NACKed by the slave. Complete transacti
 243:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     */
 244:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     if(Comm_CHECK_INTR_MASTER_MASKED(Comm_INTR_MASTER_I2C_NACK))
 292              		.loc 1 244 0
 293 014e 1568     		ldr	r5, [r2]
 294 0150 0542     		tst	r5, r0
 295 0152 09D0     		beq	.L28
 245:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     {
 246:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         Comm_ClearMasterInterruptSource(Comm_INTR_MASTER_I2C_NACK);
 296              		.loc 1 246 0
 297 0154 794B     		ldr	r3, .L164+40
 298              	.LVL20:
 247:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 248:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         Comm_mstrStatus |= (uint16) (Comm_I2C_MSTAT_ERR_XFER |
 299              		.loc 1 248 0
 300 0156 7549     		ldr	r1, .L164+24
 246:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 301              		.loc 1 246 0
 302 0158 1860     		str	r0, [r3]
 303              		.loc 1 248 0
 304 015a 8820     		mov	r0, #136
 305 015c 0B88     		ldrh	r3, [r1]
 306 015e 8000     		lsl	r0, r0, #2
 307 0160 0343     		orr	r3, r0
 308 0162 0B80     		strh	r3, [r1]
 309              	.LVL21:
 249:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                                                  Comm_I2C_MSTAT_ERR_ADDR_NAK);
 250:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 251:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         endTransfer = Comm_I2C_CMPLT_ANY_TRANSFER;
 310              		.loc 1 251 0
 311 0164 0123     		mov	r3, #1
 312 0166 0DE0     		b	.L27
 313              	.LVL22:
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 11


 314              	.L28:
 252:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     }
 253:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* INTR_TX_UNDERFLOW. The master sent an address:
 254:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     *  - TX direction: the clock is stretched after the ACK phase, because the TX F
 255:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     *    EMPTY. The TX EMPTY cleans all the TX interrupt sources.
 256:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     *  - RX direction: the 1st byte is received, but there is no ACK permission,
 257:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     *    the clock is stretched after 1 byte is received.
 258:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     */
 259:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     else
 260:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     {
 261:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         if(Comm_CHECK_I2C_FSM_RD) /* Reading */
 315              		.loc 1 261 0
 316 0168 2078     		ldrb	r0, [r4]
 317 016a C007     		lsl	r0, r0, #31
 318 016c 02D5     		bpl	.L29
 262:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         {
 263:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_state = Comm_I2C_FSM_MSTR_RD_DATA;
 319              		.loc 1 263 0
 320 016e 2521     		mov	r1, #37
 321 0170 2170     		strb	r1, [r4]
 322 0172 07E0     		b	.L27
 323              	.L29:
 264:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 265:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         else /* Writing */
 266:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         {
 267:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_state = Comm_I2C_FSM_MSTR_WR_DATA;
 324              		.loc 1 267 0
 325 0174 2420     		mov	r0, #36
 326 0176 2070     		strb	r0, [r4]
 268:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             if(0u != Comm_mstrWrBufSize)
 327              		.loc 1 268 0
 328 0178 7148     		ldr	r0, .L164+44
 329 017a 0068     		ldr	r0, [r0]
 330 017c 0028     		cmp	r0, #0
 331 017e 01D0     		beq	.L27
 269:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             {
 270:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 /* Enable INTR.TX_EMPTY if there is data to transmit */
 271:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 Comm_SetTxInterruptMode(Comm_INTR_TX_EMPTY);
 332              		.loc 1 271 0
 333 0180 7048     		ldr	r0, .L164+48
 334 0182 0160     		str	r1, [r0]
 335              	.LVL23:
 336              	.L27:
 272:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             }
 273:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 274:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     }
 275:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 276:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 277:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 if(Comm_CHECK_I2C_FSM_DATA) /* Data phase */
 337              		.loc 1 277 0
 338 0184 0421     		mov	r1, #4
 339 0186 2078     		ldrb	r0, [r4]
 340 0188 0842     		tst	r0, r1
 341 018a 00D1     		bne	.LCB355
 342 018c 9BE0     		b	.L30	@long jump
 343              	.LCB355:
 278:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 12


 279:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     if(Comm_CHECK_I2C_FSM_RD) /* Reading */
 344              		.loc 1 279 0
 345 018e 0120     		mov	r0, #1
 346 0190 2578     		ldrb	r5, [r4]
 347 0192 0542     		tst	r5, r0
 348 0194 43D0     		beq	.L31
 280:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     {
 281:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         /* INTR_RX_FULL:
 282:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         * RX direction: the master received 8 bytes.
 283:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         * Get data from RX FIFO and decide whether to ACK or  NACK the following by
 284:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         */
 285:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         if(Comm_CHECK_INTR_RX_MASKED(Comm_INTR_RX_FULL))
 349              		.loc 1 285 0
 350 0196 0825     		mov	r5, #8
 351 0198 6B4A     		ldr	r2, .L164+52
 352 019a 1668     		ldr	r6, [r2]
 353 019c 2E42     		tst	r6, r5
 354 019e 23D0     		beq	.L32
 286:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         {
 287:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             /* Calculate difference */
 288:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             diffCount =  Comm_mstrRdBufSize -
 355              		.loc 1 288 0
 356 01a0 6A4A     		ldr	r2, .L164+56
 289:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                         (Comm_mstrRdBufIndex + Comm_GET_RX_FIFO_ENTRIES);
 357              		.loc 1 289 0
 358 01a2 6B49     		ldr	r1, .L164+60
 288:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                         (Comm_mstrRdBufIndex + Comm_GET_RX_FIFO_ENTRIES);
 359              		.loc 1 288 0
 360 01a4 1668     		ldr	r6, [r2]
 361              		.loc 1 289 0
 362 01a6 0F68     		ldr	r7, [r1]
 363 01a8 6A4A     		ldr	r2, .L164+64
 364 01aa F71B     		sub	r7, r6, r7
 365 01ac 0F26     		mov	r6, #15
 366 01ae 1268     		ldr	r2, [r2]
 367 01b0 3240     		and	r2, r6
 288:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                         (Comm_mstrRdBufIndex + Comm_GET_RX_FIFO_ENTRIES);
 368              		.loc 1 288 0
 369 01b2 BA1A     		sub	r2, r7, r2
 370              	.LVL24:
 290:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 291:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             /* Proceed transaction or end it when RX FIFO becomes FULL again */
 292:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             if(diffCount > Comm_I2C_FIFO_SIZE)
 371              		.loc 1 292 0
 372 01b4 AA42     		cmp	r2, r5
 373 01b6 07D8     		bhi	.L85
 293:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             {
 294:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 diffCount = Comm_I2C_FIFO_SIZE;
 295:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             }
 296:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             else
 297:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             {
 298:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 if(0u == diffCount)
 374              		.loc 1 298 0
 375 01b8 002A     		cmp	r2, #0
 376 01ba 06D1     		bne	.L34
 299:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 {
 300:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                     Comm_DISABLE_MASTER_AUTO_DATA_ACK;
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 13


 377              		.loc 1 300 0
 378 01bc 664A     		ldr	r2, .L164+68
 379              	.LVL25:
 380 01be 674B     		ldr	r3, .L164+72
 381              	.LVL26:
 382 01c0 1668     		ldr	r6, [r2]
 383 01c2 3340     		and	r3, r6
 384 01c4 1360     		str	r3, [r2]
 385              	.LVL27:
 301:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 302:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                     diffCount   = Comm_I2C_FIFO_SIZE;
 303:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                     endTransfer = Comm_I2C_CMPLT_ANY_TRANSFER;
 386              		.loc 1 303 0
 387 01c6 031C     		mov	r3, r0
 388              	.LVL28:
 389              	.L85:
 294:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             }
 390              		.loc 1 294 0
 391 01c8 2A1C     		mov	r2, r5
 392              	.LVL29:
 393              	.L34:
 304:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 }
 305:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             }
 306:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 307:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             for(; (0u != diffCount); diffCount--)
 308:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             {
 309:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 Comm_mstrRdBufPtr[Comm_mstrRdBufIndex] = (uint8)
 394              		.loc 1 309 0 discriminator 2
 395 01ca 654D     		ldr	r5, .L164+76
 396 01cc 0868     		ldr	r0, [r1]
 397 01ce 2D68     		ldr	r5, [r5]
 307:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             {
 398              		.loc 1 307 0 discriminator 2
 399 01d0 013A     		sub	r2, r2, #1
 400              	.LVL30:
 401              		.loc 1 309 0 discriminator 2
 402 01d2 2818     		add	r0, r5, r0
 310:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                                                                         Comm_RX_FIF
 403              		.loc 1 310 0 discriminator 2
 404 01d4 634D     		ldr	r5, .L164+80
 405 01d6 2D68     		ldr	r5, [r5]
 309:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                                                                         Comm_RX_FIF
 406              		.loc 1 309 0 discriminator 2
 407 01d8 EDB2     		uxtb	r5, r5
 408 01da 0570     		strb	r5, [r0]
 311:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 Comm_mstrRdBufIndex++;
 409              		.loc 1 311 0 discriminator 2
 410 01dc 0868     		ldr	r0, [r1]
 411 01de 0130     		add	r0, r0, #1
 412 01e0 0860     		str	r0, [r1]
 307:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             {
 413              		.loc 1 307 0 discriminator 2
 414 01e2 002A     		cmp	r2, #0
 415 01e4 F1D1     		bne	.L34
 416 01e6 17E0     		b	.L35
 417              	.LVL31:
 418              	.L32:
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 14


 312:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             }
 313:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 314:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         /* INTR_RX_NOT_EMPTY:
 315:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         * RX direction: the master received one data byte, ACK or NACK it.
 316:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         * The last byte is stored and NACKed by the master. The NACK and Stop is
 317:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         * generated by one command generate Stop.
 318:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         */
 319:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         else if(Comm_CHECK_INTR_RX_MASKED(Comm_INTR_RX_NOT_EMPTY))
 419              		.loc 1 319 0
 420 01e8 1268     		ldr	r2, [r2]
 421 01ea 0A42     		tst	r2, r1
 422 01ec 14D0     		beq	.L35
 320:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         {
 321:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             /* Put data in component buffer */
 322:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_mstrRdBufPtr[Comm_mstrRdBufIndex] = (uint8) Comm_RX_FIFO_RD_REG;
 423              		.loc 1 322 0
 424 01ee 584A     		ldr	r2, .L164+60
 425 01f0 5B4E     		ldr	r6, .L164+76
 426 01f2 1568     		ldr	r5, [r2]
 427 01f4 3668     		ldr	r6, [r6]
 428 01f6 7519     		add	r5, r6, r5
 429 01f8 5A4E     		ldr	r6, .L164+80
 430 01fa 3668     		ldr	r6, [r6]
 431 01fc F6B2     		uxtb	r6, r6
 432 01fe 2E70     		strb	r6, [r5]
 323:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_mstrRdBufIndex++;
 433              		.loc 1 323 0
 434 0200 1568     		ldr	r5, [r2]
 435 0202 0135     		add	r5, r5, #1
 436 0204 1560     		str	r5, [r2]
 324:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 325:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             if(Comm_mstrRdBufIndex < Comm_mstrRdBufSize)
 437              		.loc 1 325 0
 438 0206 1568     		ldr	r5, [r2]
 439 0208 504A     		ldr	r2, .L164+56
 440 020a 1268     		ldr	r2, [r2]
 441 020c 9542     		cmp	r5, r2
 442 020e 02D2     		bcs	.L86
 326:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             {
 327:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 Comm_I2C_MASTER_GENERATE_ACK;
 443              		.loc 1 327 0
 444 0210 474A     		ldr	r2, .L164+28
 445 0212 1160     		str	r1, [r2]
 446 0214 00E0     		b	.L35
 447              	.L86:
 328:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             }
 329:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             else
 330:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             {
 331:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                endTransfer = Comm_I2C_CMPLT_ANY_TRANSFER;
 448              		.loc 1 331 0
 449 0216 031C     		mov	r3, r0
 450              	.LVL32:
 451              	.L35:
 332:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             }
 333:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 334:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         else
 335:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         {
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 15


 336:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             /* Do nothing */
 337:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 338:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 339:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         Comm_ClearRxInterruptSource(Comm_INTR_RX_ALL);
 452              		.loc 1 339 0
 453 0218 5349     		ldr	r1, .L164+84
 454 021a 544A     		ldr	r2, .L164+88
 455 021c 49E0     		b	.L156
 456              	.L31:
 340:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     }
 341:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     else /* Writing */
 342:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     {
 343:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         /* INTR_MASTER_I2C_NACK :
 344:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         * The master writes data to the slave and NACK was received: not all the by
 345:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         * written to the slave from the TX FIFO. Revert the index if there is data 
 346:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         * the TX FIFO and pass control to a complete transfer.
 347:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         */
 348:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         if(Comm_CHECK_INTR_MASTER_MASKED(Comm_INTR_MASTER_I2C_NACK))
 457              		.loc 1 348 0
 458 021e 1168     		ldr	r1, [r2]
 459 0220 0222     		mov	r2, #2
 460 0222 1142     		tst	r1, r2
 461 0224 20D0     		beq	.L36
 349:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         {
 350:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_ClearMasterInterruptSource(Comm_INTR_MASTER_I2C_NACK);
 462              		.loc 1 350 0
 463 0226 454B     		ldr	r3, .L164+40
 464              	.LVL33:
 351:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 352:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             /* Rollback write buffer index: NACKed byte remains in shifter */
 353:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_mstrWrBufIndexTmp -= (Comm_GET_TX_FIFO_ENTRIES +
 465              		.loc 1 353 0
 466 0228 5149     		ldr	r1, .L164+92
 350:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 467              		.loc 1 350 0
 468 022a 1A60     		str	r2, [r3]
 469              		.loc 1 353 0
 470 022c 514D     		ldr	r5, .L164+96
 471 022e 0E68     		ldr	r6, [r1]
 472 0230 0D32     		add	r2, r2, #13
 354:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                                                    Comm_GET_TX_FIFO_SR_VALID);
 473              		.loc 1 354 0
 474 0232 0B68     		ldr	r3, [r1]
 353:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                                                    Comm_GET_TX_FIFO_SR_VALID);
 475              		.loc 1 353 0
 476 0234 2968     		ldr	r1, [r5]
 477 0236 3240     		and	r2, r6
 478 0238 8A1A     		sub	r2, r1, r2
 355:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 356:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             /* Update number of transferred bytes */
 357:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_mstrWrBufIndex = Comm_mstrWrBufIndexTmp;
 358:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 359:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_mstrStatus |= (uint16) (Comm_I2C_MSTAT_ERR_XFER |
 479              		.loc 1 359 0
 480 023a 8421     		mov	r1, #132
 353:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                                                    Comm_GET_TX_FIFO_SR_VALID);
 481              		.loc 1 353 0
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 16


 482 023c DB0B     		lsr	r3, r3, #15
 483 023e 0340     		and	r3, r0
 484 0240 D31A     		sub	r3, r2, r3
 485 0242 2B60     		str	r3, [r5]
 357:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 486              		.loc 1 357 0
 487 0244 2A68     		ldr	r2, [r5]
 488 0246 4C4B     		ldr	r3, .L164+100
 489              		.loc 1 359 0
 490 0248 8900     		lsl	r1, r1, #2
 357:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 491              		.loc 1 357 0
 492 024a 1A60     		str	r2, [r3]
 493              		.loc 1 359 0
 494 024c 374A     		ldr	r2, .L164+24
 495 024e 1388     		ldrh	r3, [r2]
 496 0250 0B43     		orr	r3, r1
 360:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                                                      Comm_I2C_MSTAT_ERR_SHORT_XFER)
 361:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 362:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_CLEAR_TX_FIFO;
 497              		.loc 1 362 0
 498 0252 8021     		mov	r1, #128
 359:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                                                      Comm_I2C_MSTAT_ERR_SHORT_XFER)
 499              		.loc 1 359 0
 500 0254 1380     		strh	r3, [r2]
 501              		.loc 1 362 0
 502 0256 494B     		ldr	r3, .L164+104
 503 0258 4902     		lsl	r1, r1, #9
 504 025a 1A68     		ldr	r2, [r3]
 505 025c 0A43     		orr	r2, r1
 506 025e 1A60     		str	r2, [r3]
 507 0260 1968     		ldr	r1, [r3]
 508 0262 474A     		ldr	r2, .L164+108
 509 0264 0A40     		and	r2, r1
 510 0266 2CE0     		b	.L157
 511              	.LVL34:
 512              	.L36:
 363:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 364:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             endTransfer = Comm_I2C_CMPLT_ANY_TRANSFER;
 365:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 366:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         /* INTR_TX_EMPTY :
 367:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         * TX direction: the TX FIFO is EMPTY, the data from the buffer needs to be 
 368:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         * When there is no data in the component buffer, the underflow interrupt is
 369:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         * enabled to catch when all the data has been transferred.
 370:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         */
 371:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         else if(Comm_CHECK_INTR_TX_MASKED(Comm_INTR_TX_EMPTY))
 513              		.loc 1 371 0
 514 0268 464A     		ldr	r2, .L164+112
 515 026a 1168     		ldr	r1, [r2]
 516 026c C906     		lsl	r1, r1, #27
 517 026e 22D5     		bpl	.L38
 372:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         {
 373:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             while(Comm_I2C_FIFO_SIZE != Comm_GET_TX_FIFO_ENTRIES)
 374:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             {
 375:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 /* The temporary mstrWrBufIndexTmp is used because slave could NACK
 376:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 * roll-back required in this case. The mstrWrBufIndex is updated at
 377:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 */
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 17


 378:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 if(Comm_mstrWrBufIndexTmp < Comm_mstrWrBufSize)
 379:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 {
 380:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 #if(!Comm_CY_SCBIP_V0)
 381:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                    /* Clear INTR_TX.UNDERFLOW before putting the last byte into TX 
 382:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                     * a proper trigger at the end of transaction when INTR_TX.UNDER
 383:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                     * event. Ticket ID# 156735.
 384:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                     */
 385:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                     if(Comm_mstrWrBufIndexTmp == (Comm_mstrWrBufSize - 1u))
 386:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                     {
 387:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                         Comm_ClearTxInterruptSource(Comm_INTR_TX_UNDERFLOW);
 388:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                         Comm_SetTxInterruptMode(Comm_INTR_TX_UNDERFLOW);
 389:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                     }
 390:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                  #endif /* (!Comm_CY_SCBIP_V0) */
 391:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 392:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                     /* Put data into TX FIFO */
 393:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                     Comm_TX_FIFO_WR_REG = (uint32) Comm_mstrWrBufPtr[Comm_mstrWrBuf
 518              		.loc 1 393 0
 519 0270 454A     		ldr	r2, .L164+116
 520 0272 1068     		ldr	r0, [r2]
 521              	.L39:
 373:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             {
 522              		.loc 1 373 0
 523 0274 3E4A     		ldr	r2, .L164+92
 524 0276 324D     		ldr	r5, .L164+44
 525 0278 1168     		ldr	r1, [r2]
 526 027a 0F22     		mov	r2, #15
 527 027c 1140     		and	r1, r2
 528 027e 3D4A     		ldr	r2, .L164+96
 529 0280 0829     		cmp	r1, #8
 530 0282 0DD0     		beq	.L40
 378:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 {
 531              		.loc 1 378 0
 532 0284 1668     		ldr	r6, [r2]
 533 0286 2968     		ldr	r1, [r5]
 534 0288 8E42     		cmp	r6, r1
 535 028a 09D2     		bcs	.L40
 536              		.loc 1 393 0
 537 028c 1168     		ldr	r1, [r2]
 538 028e 3F4D     		ldr	r5, .L164+120
 539 0290 4118     		add	r1, r0, r1
 540 0292 0978     		ldrb	r1, [r1]
 541 0294 C9B2     		uxtb	r1, r1
 542 0296 2960     		str	r1, [r5]
 394:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                     Comm_mstrWrBufIndexTmp++;
 543              		.loc 1 394 0
 544 0298 1168     		ldr	r1, [r2]
 545 029a 0131     		add	r1, r1, #1
 546 029c 1160     		str	r1, [r2]
 547 029e E9E7     		b	.L39
 548              	.L40:
 395:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 }
 396:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 else
 397:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 {
 398:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                     break; /* No more data to put */
 399:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 }
 400:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             }
 401:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 18


 402:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         #if(Comm_CY_SCBIP_V0)
 403:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             if(Comm_mstrWrBufIndexTmp == Comm_mstrWrBufSize)
 549              		.loc 1 403 0
 550 02a0 1168     		ldr	r1, [r2]
 551 02a2 2A68     		ldr	r2, [r5]
 552 02a4 9142     		cmp	r1, r2
 553 02a6 02D1     		bne	.L42
 404:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             {
 405:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 Comm_SetTxInterruptMode(Comm_INTR_TX_UNDERFLOW);
 554              		.loc 1 405 0
 555 02a8 4021     		mov	r1, #64
 556 02aa 264A     		ldr	r2, .L164+48
 557 02ac 1160     		str	r1, [r2]
 558              	.L42:
 406:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             }
 407:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 408:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_ClearTxInterruptSource(Comm_INTR_TX_ALL);
 559              		.loc 1 408 0
 560 02ae 3849     		ldr	r1, .L164+124
 561 02b0 384A     		ldr	r2, .L164+128
 562              	.L156:
 563 02b2 1160     		str	r1, [r2]
 564 02b4 07E0     		b	.L30
 565              	.L38:
 409:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         #else
 410:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_ClearTxInterruptSource(Comm_INTR_TX_EMPTY);
 411:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         #endif /* (Comm_CY_SCBIP_V0) */
 412:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 413:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         /* INTR_TX_UNDERFLOW:
 414:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         * TX direction: all data from the TX FIFO was transferred to the slave.
 415:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         * The transaction needs to be completed.
 416:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         */
 417:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         else if(Comm_CHECK_INTR_TX_MASKED(Comm_INTR_TX_UNDERFLOW))
 566              		.loc 1 417 0
 567 02b6 1268     		ldr	r2, [r2]
 568 02b8 5206     		lsl	r2, r2, #25
 569 02ba 04D5     		bpl	.L30
 418:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         {
 419:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             /* Update number of transferred bytes */
 420:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_mstrWrBufIndex = Comm_mstrWrBufIndexTmp;
 570              		.loc 1 420 0
 571 02bc 2D4B     		ldr	r3, .L164+96
 572              	.LVL35:
 573 02be 1A68     		ldr	r2, [r3]
 574 02c0 2D4B     		ldr	r3, .L164+100
 575              	.L157:
 576 02c2 1A60     		str	r2, [r3]
 577              	.LVL36:
 578 02c4 02E0     		b	.L80
 579              	.LVL37:
 580              	.L30:
 421:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 422:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             endTransfer = Comm_I2C_CMPLT_ANY_TRANSFER;
 423:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 424:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         else
 425:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         {
 426:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             /* Do nothing */
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 19


 427:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 428:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     }
 429:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 430:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 431:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 if(0u != endTransfer) /* Complete transfer */
 581              		.loc 1 431 0
 582 02c6 002B     		cmp	r3, #0
 583 02c8 00D1     		bne	.LCB591
 584 02ca 00E2     		b	.L1	@long jump
 585              	.LCB591:
 586              	.LVL38:
 587              	.L80:
 432:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 433:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* Clean-up master after reading: only in case of NACK */
 434:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_DISABLE_MASTER_AUTO_DATA_ACK;
 588              		.loc 1 434 0
 589 02cc 224A     		ldr	r2, .L164+68
 590 02ce 234B     		ldr	r3, .L164+72
 591 02d0 1168     		ldr	r1, [r2]
 592 02d2 0B40     		and	r3, r1
 593 02d4 1360     		str	r3, [r2]
 435:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 436:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* Disable data processing interrupts: they have to be cleared before */
 437:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_SetRxInterruptMode(Comm_NO_INTR_SOURCES);
 594              		.loc 1 437 0
 595 02d6 0023     		mov	r3, #0
 596 02d8 2F4A     		ldr	r2, .L164+132
 597 02da 1360     		str	r3, [r2]
 438:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_SetTxInterruptMode(Comm_NO_INTR_SOURCES);
 598              		.loc 1 438 0
 599 02dc 194A     		ldr	r2, .L164+48
 600 02de 1360     		str	r3, [r2]
 439:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 440:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     if(Comm_CHECK_I2C_MODE_NO_STOP(Comm_mstrControl))
 601              		.loc 1 440 0
 602 02e0 2E4B     		ldr	r3, .L164+136
 603 02e2 1B78     		ldrb	r3, [r3]
 604 02e4 9B07     		lsl	r3, r3, #30
 605 02e6 0CD5     		bpl	.L44
 441:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     {
 442:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         /* On-going transaction is suspended: the ReStart is generated by the API r
 443:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         Comm_mstrStatus |= (uint16) (Comm_I2C_MSTAT_XFER_HALT |
 606              		.loc 1 443 0
 607 02e8 0123     		mov	r3, #1
 444:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                                                  Comm_GET_I2C_MSTAT_CMPLT);
 608              		.loc 1 444 0
 609 02ea 2278     		ldrb	r2, [r4]
 443:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                                                  Comm_GET_I2C_MSTAT_CMPLT);
 610              		.loc 1 443 0
 611 02ec 0F49     		ldr	r1, .L164+24
 612 02ee 1340     		and	r3, r2
 613 02f0 0A22     		mov	r2, #10
 614 02f2 D31A     		sub	r3, r2, r3
 615 02f4 0A88     		ldrh	r2, [r1]
 616 02f6 1343     		orr	r3, r2
 617 02f8 9BB2     		uxth	r3, r3
 618 02fa 0B80     		strh	r3, [r1]
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 20


 445:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 446:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         Comm_state = Comm_I2C_FSM_MSTR_HALT;
 619              		.loc 1 446 0
 620 02fc 6023     		mov	r3, #96
 621 02fe 2370     		strb	r3, [r4]
 622 0300 E5E1     		b	.L1
 623              	.L44:
 447:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     }
 448:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     else
 449:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     {
 450:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         /* Complete transaction: exclude the data processing state and generate Sto
 451:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         * The completion status will be set after Stop generation.
 452:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         * A special case is read: because NACK and Stop are generated by the comman
 453:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         * Lost arbitration can occur during NACK generation when
 454:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         * the other master is still reading from the slave.
 455:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         */
 456:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         Comm_I2C_MASTER_GENERATE_STOP;
 624              		.loc 1 456 0
 625 0302 274B     		ldr	r3, .L164+140
 626 0304 1A68     		ldr	r2, [r3]
 627 0306 1823     		mov	r3, #24
 628 0308 9206     		lsl	r2, r2, #26
 629 030a 00D4     		bmi	.L46
 630 030c 083B     		sub	r3, r3, #8
 631              	.L46:
 632              		.loc 1 456 0 is_stmt 0 discriminator 4
 633 030e 084A     		ldr	r2, .L164+28
 634 0310 1360     		str	r3, [r2]
 635 0312 DCE1     		b	.L1
 636              	.L165:
 637              		.align	2
 638              	.L164:
 639 0314 00000000 		.word	Comm_customIntrHandler
 640 0318 8C0E0640 		.word	1074138764
 641 031c 880E0640 		.word	1074138760
 642 0320 00000000 		.word	Comm_state
 643 0324 00000000 		.word	Comm_mode
 644 0328 0C0F0640 		.word	1074138892
 645 032c 00000000 		.word	Comm_mstrStatus
 646 0330 68000640 		.word	1074135144
 647 0334 4C0F0640 		.word	1074138956
 648 0338 00000000 		.word	Comm_slStatus
 649 033c 000F0640 		.word	1074138880
 650 0340 00000000 		.word	Comm_mstrWrBufSize
 651 0344 880F0640 		.word	1074139016
 652 0348 CC0F0640 		.word	1074139084
 653 034c 00000000 		.word	Comm_mstrRdBufSize
 654 0350 00000000 		.word	Comm_mstrRdBufIndex
 655 0354 08030640 		.word	1074135816
 656 0358 60000640 		.word	1074135136
 657 035c FFFEFFFF 		.word	-257
 658 0360 00000000 		.word	Comm_mstrRdBufPtr
 659 0364 40030640 		.word	1074135872
 660 0368 ED0F0000 		.word	4077
 661 036c C00F0640 		.word	1074139072
 662 0370 08020640 		.word	1074135560
 663 0374 00000000 		.word	Comm_mstrWrBufIndexTmp
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 21


 664 0378 00000000 		.word	Comm_mstrWrBufIndex
 665 037c 04020640 		.word	1074135556
 666 0380 FFFFFEFF 		.word	-65537
 667 0384 8C0F0640 		.word	1074139020
 668 0388 00000000 		.word	Comm_mstrWrBufPtr
 669 038c 40020640 		.word	1074135616
 670 0390 F3070000 		.word	2035
 671 0394 800F0640 		.word	1074139008
 672 0398 C80F0640 		.word	1074139080
 673 039c 00000000 		.word	Comm_mstrControl
 674 03a0 64000640 		.word	1074135140
 675              	.LVL39:
 676              	.L22:
 457:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     }
 458:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 459:Generated_Source\PSoC4/Comm_I2C_INT.c ****             }
 460:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 461:Generated_Source\PSoC4/Comm_I2C_INT.c ****         } /* (Comm_I2C_MASTER) */
 462:Generated_Source\PSoC4/Comm_I2C_INT.c ****         
 463:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 464:Generated_Source\PSoC4/Comm_I2C_INT.c ****     } /* (Comm_CHECK_I2C_FSM_MASTER) */
 465:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 466:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 467:Generated_Source\PSoC4/Comm_I2C_INT.c ****     /* FSM Slave */
 468:Generated_Source\PSoC4/Comm_I2C_INT.c ****     else if(Comm_CHECK_I2C_FSM_SLAVE)
 677              		.loc 1 468 0 is_stmt 1
 678 03a4 1025     		mov	r5, #16
 679 03a6 2278     		ldrb	r2, [r4]
 680 03a8 2A40     		and	r2, r5
 681 03aa 00D1     		bne	.LCB696
 682 03ac 4FE1     		b	.L47	@long jump
 683              	.LCB696:
 469:Generated_Source\PSoC4/Comm_I2C_INT.c ****     {
 470:Generated_Source\PSoC4/Comm_I2C_INT.c ****         if(Comm_I2C_SLAVE)
 684              		.loc 1 470 0
 685 03ae 0122     		mov	r2, #1
 686 03b0 0378     		ldrb	r3, [r0]
 687              	.LVL40:
 688 03b2 1342     		tst	r3, r2
 689 03b4 00D1     		bne	.LCB703
 690 03b6 8AE1     		b	.L1	@long jump
 691              	.LCB703:
 471:Generated_Source\PSoC4/Comm_I2C_INT.c ****         {
 472:Generated_Source\PSoC4/Comm_I2C_INT.c ****             /* INTR_SLAVE_NACK:
 473:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * The master completes reading the slave: the appropriate flags have to be set.
 474:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * The TX FIFO is cleared after an overflow condition is set.
 475:Generated_Source\PSoC4/Comm_I2C_INT.c ****             */
 476:Generated_Source\PSoC4/Comm_I2C_INT.c ****             if(Comm_CHECK_INTR_SLAVE_MASKED(Comm_INTR_SLAVE_I2C_NACK))
 692              		.loc 1 476 0
 693 03b8 0223     		mov	r3, #2
 694 03ba C549     		ldr	r1, .L166
 695 03bc 0868     		ldr	r0, [r1]
 696 03be 1842     		tst	r0, r3
 697 03c0 34D0     		beq	.L48
 477:Generated_Source\PSoC4/Comm_I2C_INT.c ****             {
 478:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_ClearSlaveInterruptSource(Comm_INTR_SLAVE_I2C_NACK);
 698              		.loc 1 478 0
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 22


 699 03c2 C448     		ldr	r0, .L166+4
 700 03c4 0360     		str	r3, [r0]
 479:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 480:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 /* All entries that remain in TX FIFO are: FIFO Size + 1 (SHIFTER) */
 481:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 diffCount = (Comm_GET_TX_FIFO_ENTRIES + Comm_GET_TX_FIFO_SR_VALID);
 701              		.loc 1 481 0
 702 03c6 C448     		ldr	r0, .L166+8
 703 03c8 0D33     		add	r3, r3, #13
 704 03ca 0568     		ldr	r5, [r0]
 705 03cc 0068     		ldr	r0, [r0]
 706 03ce 2B40     		and	r3, r5
 707 03d0 C00B     		lsr	r0, r0, #15
 708 03d2 0240     		and	r2, r0
 482:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 483:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 if(Comm_slOverFlowCount > diffCount) /* Overflow */
 709              		.loc 1 483 0
 710 03d4 C148     		ldr	r0, .L166+12
 481:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 711              		.loc 1 481 0
 712 03d6 D318     		add	r3, r2, r3
 713              	.LVL41:
 714              		.loc 1 483 0
 715 03d8 0678     		ldrb	r6, [r0]
 716 03da C14A     		ldr	r2, .L166+16
 717 03dc C14D     		ldr	r5, .L166+20
 718 03de 9E42     		cmp	r6, r3
 719 03e0 04D9     		bls	.L49
 484:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 485:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_slStatus |= (uint8) Comm_I2C_SSTAT_RD_OVFL;
 720              		.loc 1 485 0
 721 03e2 0426     		mov	r6, #4
 722 03e4 1378     		ldrb	r3, [r2]
 723              	.LVL42:
 724 03e6 3343     		orr	r3, r6
 725 03e8 1370     		strb	r3, [r2]
 726 03ea 04E0     		b	.L50
 727              	.LVL43:
 728              	.L49:
 486:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 487:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 else /* No Overflow */
 488:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 489:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* Roll-back temporary index */
 490:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_slRdBufIndexTmp -= (diffCount - Comm_slOverFlowCount);
 729              		.loc 1 490 0
 730 03ec 0778     		ldrb	r7, [r0]
 731 03ee 2E68     		ldr	r6, [r5]
 732 03f0 DB1B     		sub	r3, r3, r7
 733              	.LVL44:
 734 03f2 F31A     		sub	r3, r6, r3
 735 03f4 2B60     		str	r3, [r5]
 736              	.L50:
 491:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 492:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 493:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 /* Update slave of transferred bytes */
 494:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_slRdBufIndex = Comm_slRdBufIndexTmp;
 737              		.loc 1 494 0
 738 03f6 2D68     		ldr	r5, [r5]
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 23


 739 03f8 BB4B     		ldr	r3, .L166+24
 740 03fa 1D60     		str	r5, [r3]
 495:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 496:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 /* Clean-up TX FIFO */
 497:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_SetTxInterruptMode(Comm_NO_INTR_SOURCES);
 741              		.loc 1 497 0
 742 03fc 0023     		mov	r3, #0
 743 03fe BB4D     		ldr	r5, .L166+28
 744 0400 2B60     		str	r3, [r5]
 498:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_slOverFlowCount = 0u;
 499:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_CLEAR_TX_FIFO;
 745              		.loc 1 499 0
 746 0402 8025     		mov	r5, #128
 498:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_slOverFlowCount = 0u;
 747              		.loc 1 498 0
 748 0404 0370     		strb	r3, [r0]
 749              		.loc 1 499 0
 750 0406 BA48     		ldr	r0, .L166+32
 751 0408 6D02     		lsl	r5, r5, #9
 752 040a 0368     		ldr	r3, [r0]
 753 040c 2B43     		orr	r3, r5
 754 040e 0360     		str	r3, [r0]
 755 0410 0568     		ldr	r5, [r0]
 756 0412 B84B     		ldr	r3, .L166+36
 757 0414 2B40     		and	r3, r5
 758 0416 0360     		str	r3, [r0]
 500:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 501:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 /* Complete master reading */
 502:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_slStatus &= (uint8) ~Comm_I2C_SSTAT_RD_BUSY;
 759              		.loc 1 502 0
 760 0418 0220     		mov	r0, #2
 761 041a 1378     		ldrb	r3, [r2]
 762 041c 8343     		bic	r3, r0
 763 041e 1370     		strb	r3, [r2]
 503:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_slStatus |= (uint8)  Comm_I2C_SSTAT_RD_CMPLT;
 764              		.loc 1 503 0
 765 0420 1378     		ldrb	r3, [r2]
 766 0422 0138     		sub	r0, r0, #1
 767 0424 0343     		orr	r3, r0
 768 0426 1370     		strb	r3, [r2]
 504:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_state     =  Comm_I2C_FSM_IDLE;
 769              		.loc 1 504 0
 770 0428 1023     		mov	r3, #16
 771 042a 2370     		strb	r3, [r4]
 772              	.L48:
 505:Generated_Source\PSoC4/Comm_I2C_INT.c ****             }
 506:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 507:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 508:Generated_Source\PSoC4/Comm_I2C_INT.c ****             /* INTR_SLAVE_I2C_WRITE_STOP:
 509:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * The master completes writing to the slave: the appropriate flags have to be set.
 510:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * The RX FIFO contains 1-8 bytes from the previous transaction which needs to be read.
 511:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * There is a possibility that RX FIFO contains an address, it needs to leave it there.
 512:Generated_Source\PSoC4/Comm_I2C_INT.c ****             */
 513:Generated_Source\PSoC4/Comm_I2C_INT.c ****             if(Comm_CHECK_INTR_SLAVE_MASKED(Comm_INTR_SLAVE_I2C_WRITE_STOP))
 773              		.loc 1 513 0
 774 042c 0823     		mov	r3, #8
 775 042e 0A68     		ldr	r2, [r1]
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 24


 776 0430 1A42     		tst	r2, r3
 777 0432 3ED0     		beq	.L51
 514:Generated_Source\PSoC4/Comm_I2C_INT.c ****             {
 515:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_ClearSlaveInterruptSource(Comm_INTR_SLAVE_I2C_WRITE_STOP);
 778              		.loc 1 515 0
 779 0434 A74A     		ldr	r2, .L166+4
 780 0436 1360     		str	r3, [r2]
 516:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 517:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 /* Read bytes from RX FIFO when auto data ACK receive logic is enabled. Otherwise a
 518:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 * were already read from the RX FIFO except for address byte which has to stay here
 519:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 * I2C_ADDR_MATCH.
 520:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 */
 521:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 if (0u != (Comm_I2C_CTRL_REG & Comm_I2C_CTRL_S_READY_DATA_ACK))
 781              		.loc 1 521 0
 782 0438 AF4A     		ldr	r2, .L166+40
 783 043a 1368     		ldr	r3, [r2]
 784 043c 9B04     		lsl	r3, r3, #18
 785 043e 20D5     		bpl	.L53
 786              	.L52:
 522:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 523:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     while(0u != Comm_GET_RX_FIFO_ENTRIES)
 787              		.loc 1 523 0
 788 0440 0F23     		mov	r3, #15
 789 0442 AE48     		ldr	r0, .L166+44
 790 0444 0568     		ldr	r5, [r0]
 791 0446 1D42     		tst	r5, r3
 792 0448 17D0     		beq	.L55
 524:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     {
 525:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         if(Comm_CHECK_I2C_ACCEPT_ADDRESS)
 793              		.loc 1 525 0
 794 044a AD4D     		ldr	r5, .L166+48
 795 044c 2D78     		ldrb	r5, [r5]
 796 044e 002D     		cmp	r5, #0
 797 0450 06D0     		beq	.L54
 526:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         {
 527:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             if((1u == Comm_GET_RX_FIFO_ENTRIES) &&
 798              		.loc 1 527 0
 799 0452 0068     		ldr	r0, [r0]
 800 0454 0340     		and	r3, r0
 801 0456 012B     		cmp	r3, #1
 802 0458 02D1     		bne	.L54
 528:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                (Comm_CHECK_INTR_SLAVE_MASKED(Comm_INTR_SLAVE_I2C_ADDR_MATCH)))
 803              		.loc 1 528 0 discriminator 1
 804 045a 0B68     		ldr	r3, [r1]
 527:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                (Comm_CHECK_INTR_SLAVE_MASKED(Comm_INTR_SLAVE_I2C_ADDR_MATCH)))
 805              		.loc 1 527 0 discriminator 1
 806 045c 5B06     		lsl	r3, r3, #25
 807 045e 0CD4     		bmi	.L55
 808              	.L54:
 529:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             {
 530:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 break; /* Leave address in RX FIFO */
 531:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             }
 532:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 533:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         
 534:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 535:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         /* Put data in component buffer */
 536:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         Comm_slWrBufPtr[Comm_slWrBufIndex] = (uint8) Comm_RX_FIFO_RD_REG;
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 25


 809              		.loc 1 536 0
 810 0460 A84B     		ldr	r3, .L166+52
 811 0462 A94D     		ldr	r5, .L166+56
 812 0464 1868     		ldr	r0, [r3]
 813 0466 2D68     		ldr	r5, [r5]
 814 0468 2818     		add	r0, r5, r0
 815 046a A84D     		ldr	r5, .L166+60
 816 046c 2D68     		ldr	r5, [r5]
 817 046e EDB2     		uxtb	r5, r5
 818 0470 0570     		strb	r5, [r0]
 537:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         Comm_slWrBufIndex++;
 819              		.loc 1 537 0
 820 0472 1868     		ldr	r0, [r3]
 821 0474 0130     		add	r0, r0, #1
 822 0476 1860     		str	r0, [r3]
 823 0478 E2E7     		b	.L52
 824              	.L55:
 538:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     }
 539:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 540:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_DISABLE_SLAVE_AUTO_DATA;
 825              		.loc 1 540 0
 826 047a 1068     		ldr	r0, [r2]
 827 047c A44B     		ldr	r3, .L166+64
 828 047e 0340     		and	r3, r0
 829 0480 1360     		str	r3, [r2]
 830              	.L53:
 541:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 542:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 543:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 if(Comm_CHECK_INTR_RX(Comm_INTR_RX_OVERFLOW))
 831              		.loc 1 543 0
 832 0482 A44B     		ldr	r3, .L166+68
 833 0484 964A     		ldr	r2, .L166+16
 834 0486 1D68     		ldr	r5, [r3]
 835 0488 181C     		mov	r0, r3
 836 048a AB06     		lsl	r3, r5, #26
 837 048c 03D5     		bpl	.L57
 544:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 545:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_slStatus |= (uint8) Comm_I2C_SSTAT_WR_OVFL;
 838              		.loc 1 545 0
 839 048e 4025     		mov	r5, #64
 840 0490 1378     		ldrb	r3, [r2]
 841 0492 2B43     		orr	r3, r5
 842 0494 1370     		strb	r3, [r2]
 843              	.L57:
 546:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 547:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 548:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 /* Clears RX interrupt sources triggered on data receiving */
 549:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_SetRxInterruptMode(Comm_NO_INTR_SOURCES);
 844              		.loc 1 549 0
 845 0496 0025     		mov	r5, #0
 846 0498 9F4B     		ldr	r3, .L166+72
 847 049a 1D60     		str	r5, [r3]
 550:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_ClearRxInterruptSource(Comm_INTR_RX_ALL);
 848              		.loc 1 550 0
 849 049c 9F4B     		ldr	r3, .L166+76
 850 049e 0360     		str	r3, [r0]
 551:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 26


 552:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 /* Complete master writing */
 553:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_slStatus &= (uint8) ~Comm_I2C_SSTAT_WR_BUSY;
 851              		.loc 1 553 0
 852 04a0 2020     		mov	r0, #32
 853 04a2 1378     		ldrb	r3, [r2]
 854 04a4 8343     		bic	r3, r0
 855 04a6 1370     		strb	r3, [r2]
 554:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_slStatus |= (uint8)  Comm_I2C_SSTAT_WR_CMPLT;
 856              		.loc 1 554 0
 857 04a8 1378     		ldrb	r3, [r2]
 858 04aa 1038     		sub	r0, r0, #16
 859 04ac 0343     		orr	r3, r0
 860 04ae 1370     		strb	r3, [r2]
 555:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_state     =  Comm_I2C_FSM_IDLE;
 861              		.loc 1 555 0
 862 04b0 2070     		strb	r0, [r4]
 863              	.L51:
 556:Generated_Source\PSoC4/Comm_I2C_INT.c ****             }
 557:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 558:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 559:Generated_Source\PSoC4/Comm_I2C_INT.c ****             /* INTR_SLAVE_I2C_ADDR_MATCH or INTR_SLAVE_I2C_GENERAL:
 560:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * The address match or general call address event starts the slave operation:
 561:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * after leaving the TX or RX direction has to be chosen.
 562:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * The wakeup interrupt must be cleared only after an address match is set.
 563:Generated_Source\PSoC4/Comm_I2C_INT.c ****             */
 564:Generated_Source\PSoC4/Comm_I2C_INT.c ****         #if (Comm_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
 565:Generated_Source\PSoC4/Comm_I2C_INT.c ****             if (Comm_CHECK_INTR_SLAVE_MASKED(Comm_INTR_SLAVE_I2C_ADDR_MATCH |
 864              		.loc 1 565 0
 865 04b2 C023     		mov	r3, #192
 866 04b4 0A68     		ldr	r2, [r1]
 867 04b6 1A42     		tst	r2, r3
 868 04b8 51D0     		beq	.L58
 566:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                                          Comm_INTR_SLAVE_I2C_GENERAL))
 567:Generated_Source\PSoC4/Comm_I2C_INT.c ****         #else
 568:Generated_Source\PSoC4/Comm_I2C_INT.c ****             if (Comm_CHECK_INTR_SLAVE_MASKED(Comm_INTR_SLAVE_I2C_ADDR_MATCH))
 569:Generated_Source\PSoC4/Comm_I2C_INT.c ****         #endif /* (Comm_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 570:Generated_Source\PSoC4/Comm_I2C_INT.c ****             {
 571:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 /* Clear externally clocked address match interrupt source when internally clocked 
 572:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_ClearI2CExtClkInterruptSource(Comm_INTR_I2C_EC_WAKE_UP);
 869              		.loc 1 572 0
 870 04ba 0122     		mov	r2, #1
 871 04bc 984B     		ldr	r3, .L166+80
 573:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 574:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 if (Comm_I2C_CUSTOM_ADDRESS_HANDLER)
 872              		.loc 1 574 0
 873 04be 8E4D     		ldr	r5, .L166+40
 572:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 874              		.loc 1 572 0
 875 04c0 1A60     		str	r2, [r3]
 876              		.loc 1 574 0
 877 04c2 2B68     		ldr	r3, [r5]
 878 04c4 834E     		ldr	r6, .L166+4
 879 04c6 974F     		ldr	r7, .L166+84
 880 04c8 1B05     		lsl	r3, r3, #20
 881 04ca 03D4     		bmi	.L59
 882              		.loc 1 574 0 is_stmt 0 discriminator 1
 883 04cc 8C4B     		ldr	r3, .L166+48
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 27


 884 04ce 1B78     		ldrb	r3, [r3]
 885 04d0 002B     		cmp	r3, #0
 886 04d2 10D0     		beq	.L60
 887              	.L59:
 575:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 576:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     if (NULL != Comm_customAddressHandler)
 888              		.loc 1 576 0 is_stmt 1
 889 04d4 944B     		ldr	r3, .L166+88
 890 04d6 1868     		ldr	r0, [r3]
 891 04d8 0028     		cmp	r0, #0
 892 04da 01D0     		beq	.L61
 577:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     {
 578:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         /* Call custom address handler */
 579:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         response = Comm_customAddressHandler();
 893              		.loc 1 579 0
 894 04dc 8047     		blx	r0
 895              	.LVL45:
 896 04de 01E0     		b	.L62
 897              	.LVL46:
 898              	.L61:
 580:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     }
 581:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     else
 582:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     {
 583:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         /* Read address from the RX FIFO. If there is no address underflow triggers
 584:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         * component does not use that source. */
 585:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         (void) Comm_RX_FIFO_RD_REG;
 899              		.loc 1 585 0
 900 04e0 8A4B     		ldr	r3, .L166+60
 901 04e2 1B68     		ldr	r3, [r3]
 902              	.LVL47:
 903              	.L62:
 586:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         response = Comm_I2C_ACK_ADDR;
 587:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     }
 588:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 589:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* Clears RX sources after address was received in the RX FIFO */
 590:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_ClearRxInterruptSource(Comm_INTR_RX_ALL);
 904              		.loc 1 590 0
 905 04e4 8D4A     		ldr	r2, .L166+76
 906 04e6 8B4B     		ldr	r3, .L166+68
 907 04e8 1A60     		str	r2, [r3]
 591:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 592:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 
 593:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 594:Generated_Source\PSoC4/Comm_I2C_INT.c ****             #if (Comm_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
 595:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 if (response == Comm_I2C_NAK_ADDR)
 908              		.loc 1 595 0
 909 04ea 0128     		cmp	r0, #1
 910 04ec 03D1     		bne	.L60
 596:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 597:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 #if (!Comm_CY_SCBIP_V0)
 598:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* Disable write stop interrupt source as it triggers after address was NACKed.
 599:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_DISABLE_INTR_SLAVE(Comm_INTR_SLAVE_I2C_WRITE_STOP);
 600:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 #endif /* (!Comm_CY_SCBIP_V0) */
 601:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 602:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* Clear address match and stop history */
 603:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_ClearSlaveInterruptSource(Comm_INTR_SLAVE_ALL);
 911              		.loc 1 603 0
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 28


 912 04ee 3760     		str	r7, [r6]
 604:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 605:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* ACK the address byte */
 606:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_I2C_SLAVE_GENERATE_NACK;
 913              		.loc 1 606 0
 914 04f0 FFF7FEFF 		bl	Comm_I2CSlaveNackGeneration
 915              	.LVL48:
 916 04f4 33E0     		b	.L58
 917              	.L60:
 607:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 608:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 else
 609:Generated_Source\PSoC4/Comm_I2C_INT.c ****             #endif /* (Comm_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 610:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 611:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     if(Comm_CHECK_I2C_STATUS(Comm_I2C_STATUS_S_READ))
 918              		.loc 1 611 0
 919 04f6 8D4B     		ldr	r3, .L166+92
 920 04f8 794A     		ldr	r2, .L166+16
 921 04fa 1968     		ldr	r1, [r3]
 922 04fc 1023     		mov	r3, #16
 923 04fe 1942     		tst	r1, r3
 924 0500 0BD0     		beq	.L63
 612:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* TX direction: master reads from slave */
 613:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     {
 614:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         Comm_SetTxInterruptMode(Comm_INTR_TX_EMPTY);
 925              		.loc 1 614 0
 926 0502 7A49     		ldr	r1, .L166+28
 927 0504 0B60     		str	r3, [r1]
 615:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 616:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         /* Set temporary index to address buffer clear from API */
 617:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         Comm_slRdBufIndexTmp = Comm_slRdBufIndex;
 928              		.loc 1 617 0
 929 0506 784B     		ldr	r3, .L166+24
 930 0508 1968     		ldr	r1, [r3]
 931 050a 764B     		ldr	r3, .L166+20
 932 050c 1960     		str	r1, [r3]
 618:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 619:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         /* Start master reading */
 620:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         Comm_slStatus |= (uint8) Comm_I2C_SSTAT_RD_BUSY;
 933              		.loc 1 620 0
 934 050e 0221     		mov	r1, #2
 935 0510 1378     		ldrb	r3, [r2]
 936 0512 0B43     		orr	r3, r1
 937 0514 1370     		strb	r3, [r2]
 621:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         Comm_state     = Comm_I2C_FSM_SL_RD;
 938              		.loc 1 621 0
 939 0516 1223     		mov	r3, #18
 940 0518 1CE0     		b	.L159
 941              	.L63:
 622:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     }
 623:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     else
 624:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* RX direction: master writes into slave */
 625:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     {
 626:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         /* Calculate available buffer size */
 627:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         diffCount = (Comm_slWrBufSize - Comm_slWrBufIndex);
 942              		.loc 1 627 0
 943 051a 854B     		ldr	r3, .L166+96
 944 051c 7949     		ldr	r1, .L166+52
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 29


 945 051e 1B68     		ldr	r3, [r3]
 946 0520 0968     		ldr	r1, [r1]
 947 0522 5B1A     		sub	r3, r3, r1
 948              	.LVL49:
 628:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 629:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     #if (Comm_CY_SCBIP_V0)
 630:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         if(diffCount < Comm_I2C_FIFO_SIZE)
 631:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         /* Receive data: byte-by-byte */
 632:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         {
 633:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_SetRxInterruptMode(Comm_INTR_RX_NOT_EMPTY);
 949              		.loc 1 633 0
 950 0524 0421     		mov	r1, #4
 630:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         /* Receive data: byte-by-byte */
 951              		.loc 1 630 0
 952 0526 072B     		cmp	r3, #7
 953 0528 0DD9     		bls	.L158
 634:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 635:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         else
 636:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         /* Receive data: into RX FIFO */
 637:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         {
 638:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             if(diffCount == Comm_I2C_FIFO_SIZE)
 954              		.loc 1 638 0
 955 052a 082B     		cmp	r3, #8
 956 052c 05D1     		bne	.L67
 639:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             {
 640:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 /* NACK when RX FIFO become FULL */
 641:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 Comm_ENABLE_SLAVE_AUTO_DATA;
 957              		.loc 1 641 0
 958 052e A021     		mov	r1, #160
 959 0530 2B68     		ldr	r3, [r5]
 960              	.LVL50:
 961 0532 0902     		lsl	r1, r1, #8
 962 0534 0B43     		orr	r3, r1
 963 0536 2B60     		str	r3, [r5]
 964 0538 07E0     		b	.L66
 965              	.LVL51:
 966              	.L67:
 642:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             }
 643:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             else
 644:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             {
 645:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 /* Stretch clock when RX FIFO becomes FULL */
 646:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 Comm_ENABLE_SLAVE_AUTO_DATA_ACK;
 967              		.loc 1 646 0
 968 053a 8021     		mov	r1, #128
 969 053c 2B68     		ldr	r3, [r5]
 970              	.LVL52:
 971 053e 8901     		lsl	r1, r1, #6
 972 0540 0B43     		orr	r3, r1
 647:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 Comm_SetRxInterruptMode(Comm_INTR_RX_FULL);
 973              		.loc 1 647 0
 974 0542 0821     		mov	r1, #8
 646:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 Comm_SetRxInterruptMode(Comm_INTR_RX_FULL);
 975              		.loc 1 646 0
 976 0544 2B60     		str	r3, [r5]
 977              	.L158:
 978              		.loc 1 647 0
 979 0546 744B     		ldr	r3, .L166+72
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 30


 980 0548 1960     		str	r1, [r3]
 981              	.L66:
 648:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             }
 649:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 650:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 651:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     #else
 652:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         if(Comm_CHECK_I2C_ACCEPT_ADDRESS)
 653:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         {
 654:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             /* Enable RX.NOT_EMPTY interrupt source to receive byte by byte.
 655:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             * The byte by byte receive is always chosen for the case when an addres
 656:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             * in RX FIFO. Ticket ID#175559.
 657:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             */
 658:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_SetRxInterruptMode(Comm_INTR_RX_NOT_EMPTY);
 659:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 660:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         else
 661:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         {
 662:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             if(diffCount < Comm_I2C_FIFO_SIZE)
 663:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             /* Receive data: byte-by-byte */
 664:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             {
 665:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 Comm_SetRxInterruptMode(Comm_INTR_RX_NOT_EMPTY);
 666:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             }
 667:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             else
 668:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             /* Receive data: into RX FIFO */
 669:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             {
 670:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 if(diffCount == Comm_I2C_FIFO_SIZE)
 671:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 {
 672:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                     /* NACK when RX FIFO become FULL */
 673:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                     Comm_ENABLE_SLAVE_AUTO_DATA;
 674:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 }
 675:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 else
 676:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 {
 677:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                     /* Stretch clock when RX FIFO becomes FULL */
 678:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                     Comm_ENABLE_SLAVE_AUTO_DATA_ACK;
 679:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                     Comm_SetRxInterruptMode(Comm_INTR_RX_FULL);
 680:Generated_Source\PSoC4/Comm_I2C_INT.c ****                                 }
 681:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             }
 682:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 683:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         
 684:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     #endif /* (Comm_CY_SCBIP_V0) */
 685:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 686:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         /* Start master reading */
 687:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         Comm_slStatus |= (uint8) Comm_I2C_SSTAT_WR_BUSY;
 982              		.loc 1 687 0
 983 054a 2021     		mov	r1, #32
 984 054c 1378     		ldrb	r3, [r2]
 985 054e 0B43     		orr	r3, r1
 986 0550 1370     		strb	r3, [r2]
 688:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         Comm_state     = Comm_I2C_FSM_SL_WR;
 987              		.loc 1 688 0
 988 0552 1123     		mov	r3, #17
 989              	.L159:
 689:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     }
 690:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 691:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* Clear address match and stop history */
 692:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_ClearSlaveInterruptSource(Comm_INTR_SLAVE_ALL);
 693:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 694:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 #if (!Comm_CY_SCBIP_V0)
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 31


 695:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* Enable write stop interrupt source as it triggers after address was NACKed. 
 696:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_ENABLE_INTR_SLAVE(Comm_INTR_SLAVE_I2C_WRITE_STOP);
 697:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 #endif /* (!Comm_CY_SCBIP_V0) */
 698:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 699:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* ACK the address byte */
 700:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_I2C_SLAVE_GENERATE_ACK;
 990              		.loc 1 700 0
 991 0554 0122     		mov	r2, #1
 688:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         Comm_state     = Comm_I2C_FSM_SL_WR;
 992              		.loc 1 688 0
 993 0556 2370     		strb	r3, [r4]
 994              		.loc 1 700 0
 995 0558 764B     		ldr	r3, .L166+100
 692:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 996              		.loc 1 692 0
 997 055a 3760     		str	r7, [r6]
 998              		.loc 1 700 0
 999 055c 1A60     		str	r2, [r3]
 1000              	.L58:
 701:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 702:Generated_Source\PSoC4/Comm_I2C_INT.c ****             }
 703:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 704:Generated_Source\PSoC4/Comm_I2C_INT.c ****             /* Comm_INTR_RX_FULL:
 705:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * Get data from the RX FIFO and decide whether to ACK or NACK the following bytes
 706:Generated_Source\PSoC4/Comm_I2C_INT.c ****             */
 707:Generated_Source\PSoC4/Comm_I2C_INT.c ****             if(Comm_CHECK_INTR_RX_MASKED(Comm_INTR_RX_FULL))
 1001              		.loc 1 707 0
 1002 055e 0822     		mov	r2, #8
 1003 0560 754B     		ldr	r3, .L166+104
 1004 0562 1968     		ldr	r1, [r3]
 1005 0564 1142     		tst	r1, r2
 1006 0566 25D0     		beq	.L68
 708:Generated_Source\PSoC4/Comm_I2C_INT.c ****             {
 709:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 /* Calculate available buffer size to take into account that RX FIFO is FULL */
 710:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 diffCount =  Comm_slWrBufSize -
 1007              		.loc 1 710 0
 1008 0568 714B     		ldr	r3, .L166+96
 1009 056a 6648     		ldr	r0, .L166+52
 1010 056c 1B68     		ldr	r3, [r3]
 1011 056e 0168     		ldr	r1, [r0]
 1012 0570 083B     		sub	r3, r3, #8
 1013 0572 5B1A     		sub	r3, r3, r1
 1014              	.LVL53:
 711:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             (Comm_slWrBufIndex + Comm_I2C_FIFO_SIZE);
 712:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 713:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 if(diffCount > Comm_I2C_FIFO_SIZE) /* Proceed transaction */
 714:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 715:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     diffCount   = Comm_I2C_FIFO_SIZE;
 716:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     endTransfer = 0u;  /* Continue active transfer */
 717:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 718:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 else /* End when FIFO becomes FULL again */
 719:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 720:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     endTransfer = Comm_I2C_CMPLT_ANY_TRANSFER;
 1015              		.loc 1 720 0
 1016 0574 0124     		mov	r4, #1
 713:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 1017              		.loc 1 713 0
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 32


 1018 0576 9342     		cmp	r3, r2
 1019 0578 01D9     		bls	.L70
 716:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 1020              		.loc 1 716 0
 1021 057a 0024     		mov	r4, #0
 715:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     endTransfer = 0u;  /* Continue active transfer */
 1022              		.loc 1 715 0
 1023 057c 131C     		mov	r3, r2
 1024              	.LVL54:
 1025              	.L70:
 721:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 722:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 723:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 for(; (0u != diffCount); diffCount--)
 1026              		.loc 1 723 0 discriminator 1
 1027 057e 002B     		cmp	r3, #0
 1028 0580 0CD0     		beq	.L162
 724:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 725:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* Put data in component buffer */
 726:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_slWrBufPtr[Comm_slWrBufIndex] = (uint8) Comm_RX_FIFO_RD_REG;
 1029              		.loc 1 726 0 discriminator 2
 1030 0582 6149     		ldr	r1, .L166+56
 1031 0584 0268     		ldr	r2, [r0]
 1032 0586 0968     		ldr	r1, [r1]
 723:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 1033              		.loc 1 723 0 discriminator 2
 1034 0588 013B     		sub	r3, r3, #1
 1035              	.LVL55:
 1036              		.loc 1 726 0 discriminator 2
 1037 058a 8A18     		add	r2, r1, r2
 1038 058c 5F49     		ldr	r1, .L166+60
 1039 058e 0968     		ldr	r1, [r1]
 1040 0590 C9B2     		uxtb	r1, r1
 1041 0592 1170     		strb	r1, [r2]
 727:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_slWrBufIndex++;
 1042              		.loc 1 727 0 discriminator 2
 1043 0594 0268     		ldr	r2, [r0]
 1044 0596 0132     		add	r2, r2, #1
 1045 0598 0260     		str	r2, [r0]
 1046 059a F0E7     		b	.L70
 1047              	.L162:
 728:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 729:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 730:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 if(0u != endTransfer) /* End transfer sending NACK */
 1048              		.loc 1 730 0
 1049 059c 002C     		cmp	r4, #0
 1050 059e 07D0     		beq	.L72
 731:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 732:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_ENABLE_SLAVE_AUTO_DATA_NACK;
 1051              		.loc 1 732 0
 1052 05a0 8020     		mov	r0, #128
 1053 05a2 5549     		ldr	r1, .L166+40
 1054 05a4 0002     		lsl	r0, r0, #8
 1055 05a6 0A68     		ldr	r2, [r1]
 1056 05a8 0243     		orr	r2, r0
 1057 05aa 0A60     		str	r2, [r1]
 733:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 734:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* INTR_RX_FULL triggers earlier than INTR_SLAVE_I2C_STOP:
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 33


 735:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     * disable all RX interrupt sources.
 736:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     */
 737:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_SetRxInterruptMode(Comm_NO_INTR_SOURCES);
 1058              		.loc 1 737 0
 1059 05ac 5A4A     		ldr	r2, .L166+72
 1060 05ae 1360     		str	r3, [r2]
 1061              	.L72:
 738:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 739:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 740:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_ClearRxInterruptSource(Comm_INTR_RX_FULL);
 1062              		.loc 1 740 0
 1063 05b0 0822     		mov	r2, #8
 1064 05b2 1FE0     		b	.L160
 1065              	.LVL56:
 1066              	.L68:
 741:Generated_Source\PSoC4/Comm_I2C_INT.c ****             }
 742:Generated_Source\PSoC4/Comm_I2C_INT.c ****             /* Comm_INTR_RX_NOT_EMPTY:
 743:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * The buffer size is less than 8: it requires processing in byte-by-byte mode.
 744:Generated_Source\PSoC4/Comm_I2C_INT.c ****             */
 745:Generated_Source\PSoC4/Comm_I2C_INT.c ****             else if(Comm_CHECK_INTR_RX_MASKED(Comm_INTR_RX_NOT_EMPTY))
 1067              		.loc 1 745 0
 1068 05b4 1B68     		ldr	r3, [r3]
 1069 05b6 5B07     		lsl	r3, r3, #29
 1070 05b8 1ED5     		bpl	.L73
 746:Generated_Source\PSoC4/Comm_I2C_INT.c ****             {
 747:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 diffCount = Comm_RX_FIFO_RD_REG;
 1071              		.loc 1 747 0
 1072 05ba 544B     		ldr	r3, .L166+60
 748:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 749:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 if(Comm_slWrBufIndex < Comm_slWrBufSize)
 1073              		.loc 1 749 0
 1074 05bc 5149     		ldr	r1, .L166+52
 747:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 1075              		.loc 1 747 0
 1076 05be 1A68     		ldr	r2, [r3]
 1077              	.LVL57:
 1078              		.loc 1 749 0
 1079 05c0 5B4B     		ldr	r3, .L166+96
 1080 05c2 0868     		ldr	r0, [r1]
 1081 05c4 1B68     		ldr	r3, [r3]
 1082 05c6 9842     		cmp	r0, r3
 1083 05c8 0CD2     		bcs	.L74
 750:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 751:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_I2C_SLAVE_GENERATE_ACK;
 1084              		.loc 1 751 0
 1085 05ca 0120     		mov	r0, #1
 1086 05cc 594B     		ldr	r3, .L166+100
 752:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 753:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* Put data into component buffer */
 754:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_slWrBufPtr[Comm_slWrBufIndex] = (uint8) diffCount;
 1087              		.loc 1 754 0
 1088 05ce D2B2     		uxtb	r2, r2
 1089              	.LVL58:
 751:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 1090              		.loc 1 751 0
 1091 05d0 1860     		str	r0, [r3]
 1092              		.loc 1 754 0
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 34


 1093 05d2 4D48     		ldr	r0, .L166+56
 1094 05d4 0B68     		ldr	r3, [r1]
 1095 05d6 0068     		ldr	r0, [r0]
 1096 05d8 C318     		add	r3, r0, r3
 1097 05da 1A70     		strb	r2, [r3]
 755:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_slWrBufIndex++;
 1098              		.loc 1 755 0
 1099 05dc 0B68     		ldr	r3, [r1]
 1100 05de 0133     		add	r3, r3, #1
 1101 05e0 0B60     		str	r3, [r1]
 1102 05e2 06E0     		b	.L75
 1103              	.LVL59:
 1104              	.L74:
 756:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 757:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 else /* Overflow: there is no space in write buffer */
 758:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 759:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_I2C_SLAVE_GENERATE_NACK;
 1105              		.loc 1 759 0
 1106 05e4 FFF7FEFF 		bl	Comm_I2CSlaveNackGeneration
 1107              	.LVL60:
 760:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 761:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     Comm_slStatus |= (uint8) Comm_I2C_SSTAT_WR_OVFL;
 1108              		.loc 1 761 0
 1109 05e8 4021     		mov	r1, #64
 1110 05ea 3D4A     		ldr	r2, .L166+16
 1111 05ec 1378     		ldrb	r3, [r2]
 1112 05ee 0B43     		orr	r3, r1
 1113 05f0 1370     		strb	r3, [r2]
 1114              	.L75:
 762:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 763:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 764:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_ClearRxInterruptSource(Comm_INTR_RX_NOT_EMPTY);
 1115              		.loc 1 764 0
 1116 05f2 0422     		mov	r2, #4
 1117              	.L160:
 1118 05f4 474B     		ldr	r3, .L166+68
 1119 05f6 1A60     		str	r2, [r3]
 1120              	.L73:
 765:Generated_Source\PSoC4/Comm_I2C_INT.c ****             }
 766:Generated_Source\PSoC4/Comm_I2C_INT.c ****             else
 767:Generated_Source\PSoC4/Comm_I2C_INT.c ****             {
 768:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 /* Does nothing */
 769:Generated_Source\PSoC4/Comm_I2C_INT.c ****             }
 770:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 771:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 772:Generated_Source\PSoC4/Comm_I2C_INT.c ****             /* Comm_INTR_TX_EMPTY:
 773:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * The master reads the slave: provide data to read or 0xFF in the case of the end of th
 774:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * The overflow condition must be captured, but not set until the end of transaction.
 775:Generated_Source\PSoC4/Comm_I2C_INT.c ****             * There is a possibility of a false overflow due to TX FIFO utilization.
 776:Generated_Source\PSoC4/Comm_I2C_INT.c ****             */
 777:Generated_Source\PSoC4/Comm_I2C_INT.c ****             if(Comm_CHECK_INTR_TX_MASKED(Comm_INTR_TX_EMPTY))
 1121              		.loc 1 777 0
 1122 05f8 504B     		ldr	r3, .L166+108
 1123 05fa 1B68     		ldr	r3, [r3]
 1124 05fc DB06     		lsl	r3, r3, #27
 1125 05fe 66D5     		bpl	.L1
 778:Generated_Source\PSoC4/Comm_I2C_INT.c ****             {
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 35


 779:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 while(Comm_I2C_FIFO_SIZE != Comm_GET_TX_FIFO_ENTRIES)
 780:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 781:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* Temporary slRdBufIndexTmp is used because the master can NACK the byte and
 782:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     * index roll-back is required in this case. The slRdBufIndex is updated at the 
 783:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     * of the read transfer.
 784:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     */
 785:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     if(Comm_slRdBufIndexTmp < Comm_slRdBufSize)
 786:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* Data from buffer */
 787:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     {
 788:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         Comm_TX_FIFO_WR_REG = (uint32) Comm_slRdBufPtr[Comm_slRdBufIndexTmp];
 1126              		.loc 1 788 0
 1127 0600 4F4B     		ldr	r3, .L166+112
 1128 0602 1968     		ldr	r1, [r3]
 1129              	.L76:
 779:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 {
 1130              		.loc 1 779 0
 1131 0604 344B     		ldr	r3, .L166+8
 1132 0606 1A68     		ldr	r2, [r3]
 1133 0608 0F23     		mov	r3, #15
 1134 060a 1340     		and	r3, r2
 1135 060c 082B     		cmp	r3, #8
 1136 060e 1AD0     		beq	.L163
 785:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* Data from buffer */
 1137              		.loc 1 785 0
 1138 0610 344A     		ldr	r2, .L166+20
 1139 0612 4C4B     		ldr	r3, .L166+116
 1140 0614 1468     		ldr	r4, [r2]
 1141 0616 1B68     		ldr	r3, [r3]
 1142 0618 4B48     		ldr	r0, .L166+120
 1143 061a 9C42     		cmp	r4, r3
 1144 061c 08D2     		bcs	.L77
 1145              		.loc 1 788 0
 1146 061e 1368     		ldr	r3, [r2]
 1147 0620 CB18     		add	r3, r1, r3
 1148 0622 1B78     		ldrb	r3, [r3]
 1149 0624 DBB2     		uxtb	r3, r3
 1150 0626 0360     		str	r3, [r0]
 789:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         Comm_slRdBufIndexTmp++;
 1151              		.loc 1 789 0
 1152 0628 1368     		ldr	r3, [r2]
 1153 062a 0133     		add	r3, r3, #1
 1154 062c 1360     		str	r3, [r2]
 1155 062e E9E7     		b	.L76
 1156              	.L77:
 790:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     }
 791:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     else
 792:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     /* Probably Overflow */
 793:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     {
 794:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         Comm_TX_FIFO_WR_REG = Comm_I2C_SLAVE_OVFL_RETURN;
 1157              		.loc 1 794 0
 1158 0630 FF23     		mov	r3, #255
 795:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 796:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         if(Comm_slOverFlowCount <= Comm_I2C_TX_OVERFLOW_COUNT)
 1159              		.loc 1 796 0
 1160 0632 2A4A     		ldr	r2, .L166+12
 794:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 1161              		.loc 1 794 0
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 36


 1162 0634 0360     		str	r3, [r0]
 1163              		.loc 1 796 0
 1164 0636 1378     		ldrb	r3, [r2]
 1165 0638 0A2B     		cmp	r3, #10
 1166 063a E3D8     		bhi	.L76
 797:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         {
 798:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             /* Get counter in range of overflow. */
 799:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_slOverFlowCount++;
 1167              		.loc 1 799 0
 1168 063c 1378     		ldrb	r3, [r2]
 1169 063e 0133     		add	r3, r3, #1
 1170 0640 DBB2     		uxtb	r3, r3
 1171 0642 1370     		strb	r3, [r2]
 1172 0644 DEE7     		b	.L76
 1173              	.L163:
 800:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 801:Generated_Source\PSoC4/Comm_I2C_INT.c ****                     }
 802:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 }
 803:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 804:Generated_Source\PSoC4/Comm_I2C_INT.c ****                 Comm_ClearTxInterruptSource(Comm_INTR_TX_EMPTY);
 1174              		.loc 1 804 0
 1175 0646 1022     		mov	r2, #16
 1176 0648 404B     		ldr	r3, .L166+124
 1177 064a 1A60     		str	r2, [r3]
 1178 064c 3FE0     		b	.L1
 1179              	.LVL61:
 1180              	.L47:
 805:Generated_Source\PSoC4/Comm_I2C_INT.c ****             }
 806:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 807:Generated_Source\PSoC4/Comm_I2C_INT.c ****         }  /* (Comm_I2C_SLAVE) */
 808:Generated_Source\PSoC4/Comm_I2C_INT.c ****         
 809:Generated_Source\PSoC4/Comm_I2C_INT.c ****     }
 810:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 811:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 812:Generated_Source\PSoC4/Comm_I2C_INT.c ****     /* FSM EXIT:
 813:Generated_Source\PSoC4/Comm_I2C_INT.c ****     * Slave:  INTR_SLAVE_I2C_BUS_ERROR, INTR_SLAVE_I2C_ARB_LOST
 814:Generated_Source\PSoC4/Comm_I2C_INT.c ****     * Master: INTR_MASTER_I2C_BUS_ERROR, INTR_MASTER_I2C_ARB_LOST.
 815:Generated_Source\PSoC4/Comm_I2C_INT.c ****     */
 816:Generated_Source\PSoC4/Comm_I2C_INT.c ****     else
 817:Generated_Source\PSoC4/Comm_I2C_INT.c ****     {
 818:Generated_Source\PSoC4/Comm_I2C_INT.c ****         Comm_CTRL_REG &= (uint32) ~Comm_CTRL_ENABLED; /* Disable scb IP */
 1181              		.loc 1 818 0
 1182 064e 4049     		ldr	r1, .L166+128
 819:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 820:Generated_Source\PSoC4/Comm_I2C_INT.c ****         Comm_state = Comm_I2C_FSM_IDLE;
 821:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 822:Generated_Source\PSoC4/Comm_I2C_INT.c ****         Comm_DISABLE_SLAVE_AUTO_DATA;
 1183              		.loc 1 822 0
 1184 0650 2F48     		ldr	r0, .L166+64
 818:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 1185              		.loc 1 818 0
 1186 0652 0B68     		ldr	r3, [r1]
 1187              	.LVL62:
 1188 0654 5B00     		lsl	r3, r3, #1
 1189 0656 5B08     		lsr	r3, r3, #1
 1190 0658 0B60     		str	r3, [r1]
 1191              		.loc 1 822 0
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 37


 1192 065a 274B     		ldr	r3, .L166+40
 820:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 1193              		.loc 1 820 0
 1194 065c 2570     		strb	r5, [r4]
 1195              		.loc 1 822 0
 1196 065e 1C68     		ldr	r4, [r3]
 1197 0660 2040     		and	r0, r4
 1198 0662 1860     		str	r0, [r3]
 823:Generated_Source\PSoC4/Comm_I2C_INT.c ****         Comm_DISABLE_MASTER_AUTO_DATA;
 1199              		.loc 1 823 0
 1200 0664 1C68     		ldr	r4, [r3]
 1201 0666 3B48     		ldr	r0, .L166+132
 1202 0668 2040     		and	r0, r4
 1203 066a 1860     		str	r0, [r3]
 824:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 825:Generated_Source\PSoC4/Comm_I2C_INT.c ****     #if(Comm_CY_SCBIP_V0)
 826:Generated_Source\PSoC4/Comm_I2C_INT.c ****         Comm_SetRxInterruptMode(Comm_NO_INTR_SOURCES);
 1204              		.loc 1 826 0
 1205 066c 2A4B     		ldr	r3, .L166+72
 1206 066e 1A60     		str	r2, [r3]
 827:Generated_Source\PSoC4/Comm_I2C_INT.c ****         Comm_SetTxInterruptMode(Comm_NO_INTR_SOURCES);
 1207              		.loc 1 827 0
 1208 0670 1E4B     		ldr	r3, .L166+28
 1209 0672 1A60     		str	r2, [r3]
 828:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 829:Generated_Source\PSoC4/Comm_I2C_INT.c ****         /* Clear interrupt sources as they are not automatically cleared after SCB is disabled */
 830:Generated_Source\PSoC4/Comm_I2C_INT.c ****         Comm_ClearTxInterruptSource(Comm_INTR_RX_ALL);
 1210              		.loc 1 830 0
 1211 0674 294A     		ldr	r2, .L166+76
 1212 0676 354B     		ldr	r3, .L166+124
 1213 0678 1A60     		str	r2, [r3]
 831:Generated_Source\PSoC4/Comm_I2C_INT.c ****         Comm_ClearRxInterruptSource(Comm_INTR_TX_ALL);
 1214              		.loc 1 831 0
 1215 067a 374A     		ldr	r2, .L166+136
 1216 067c 254B     		ldr	r3, .L166+68
 1217 067e 1A60     		str	r2, [r3]
 832:Generated_Source\PSoC4/Comm_I2C_INT.c ****         Comm_ClearSlaveInterruptSource(Comm_INTR_SLAVE_ALL);
 1218              		.loc 1 832 0
 1219 0680 284A     		ldr	r2, .L166+84
 1220 0682 144B     		ldr	r3, .L166+4
 1221 0684 1A60     		str	r2, [r3]
 833:Generated_Source\PSoC4/Comm_I2C_INT.c ****         Comm_ClearMasterInterruptSource(Comm_INTR_MASTER_ALL);
 1222              		.loc 1 833 0
 1223 0686 354A     		ldr	r2, .L166+140
 1224 0688 354B     		ldr	r3, .L166+144
 1225 068a 1A60     		str	r2, [r3]
 834:Generated_Source\PSoC4/Comm_I2C_INT.c ****     #endif /* (Comm_CY_SCBIP_V0) */
 835:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 836:Generated_Source\PSoC4/Comm_I2C_INT.c ****         Comm_CTRL_REG |= (uint32) Comm_CTRL_ENABLED;  /* Enable scb IP */
 1226              		.loc 1 836 0
 1227 068c 8022     		mov	r2, #128
 1228 068e 0B68     		ldr	r3, [r1]
 1229 0690 1206     		lsl	r2, r2, #24
 1230 0692 1343     		orr	r3, r2
 1231 0694 0B60     		str	r3, [r1]
 1232 0696 1AE0     		b	.L1
 1233              	.L18:
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 38


 1234              	.LVL63:
 149:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 1235              		.loc 1 149 0
 1236 0698 8021     		mov	r1, #128
 1237 069a 154B     		ldr	r3, .L166+32
 1238 069c 4902     		lsl	r1, r1, #9
 1239 069e 1A68     		ldr	r2, [r3]
 1240 06a0 0A43     		orr	r2, r1
 1241 06a2 1A60     		str	r2, [r3]
 1242 06a4 1968     		ldr	r1, [r3]
 1243 06a6 134A     		ldr	r2, .L166+36
 1244 06a8 0A40     		and	r2, r1
 1245 06aa 1A60     		str	r2, [r3]
 151:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 1246              		.loc 1 151 0
 1247 06ac 124A     		ldr	r2, .L166+40
 1248 06ae 2D4B     		ldr	r3, .L166+148
 1249 06b0 1168     		ldr	r1, [r2]
 1250 06b2 0B40     		and	r3, r1
 1251 06b4 1360     		str	r3, [r2]
 154:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 1252              		.loc 1 154 0
 1253 06b6 294A     		ldr	r2, .L166+140
 1254 06b8 294B     		ldr	r3, .L166+144
 1255 06ba 1A60     		str	r2, [r3]
 157:Generated_Source\PSoC4/Comm_I2C_INT.c ****                             Comm_SetTxInterruptMode(Comm_NO_INTR_SOURCES);
 1256              		.loc 1 157 0
 1257 06bc 0023     		mov	r3, #0
 1258 06be 164A     		ldr	r2, .L166+72
 1259 06c0 1360     		str	r3, [r2]
 158:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 1260              		.loc 1 158 0
 1261 06c2 0A4A     		ldr	r2, .L166+28
 1262 06c4 1360     		str	r3, [r2]
 160:Generated_Source\PSoC4/Comm_I2C_INT.c ****                         }
 1263              		.loc 1 160 0
 1264 06c6 1033     		add	r3, r3, #16
 1265 06c8 2370     		strb	r3, [r4]
 1266 06ca 0F3B     		sub	r3, r3, #15
 1267 06cc 21E5     		b	.L6
 1268              	.LVL64:
 1269              	.L1:
 837:Generated_Source\PSoC4/Comm_I2C_INT.c ****     }
 838:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 839:Generated_Source\PSoC4/Comm_I2C_INT.c **** #ifdef Comm_I2C_ISR_EXIT_CALLBACK
 840:Generated_Source\PSoC4/Comm_I2C_INT.c ****     Comm_I2C_ISR_ExitCallback();
 841:Generated_Source\PSoC4/Comm_I2C_INT.c **** #endif /* Comm_I2C_ISR_EXIT_CALLBACK */
 842:Generated_Source\PSoC4/Comm_I2C_INT.c **** 
 843:Generated_Source\PSoC4/Comm_I2C_INT.c **** }
 1270              		.loc 1 843 0
 1271              		@ sp needed
 1272 06ce F7BD     		pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 1273              	.L167:
 1274              		.align	2
 1275              	.L166:
 1276 06d0 4C0F0640 		.word	1074138956
 1277 06d4 400F0640 		.word	1074138944
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 39


 1278 06d8 08020640 		.word	1074135560
 1279 06dc 00000000 		.word	Comm_slOverFlowCount
 1280 06e0 00000000 		.word	Comm_slStatus
 1281 06e4 00000000 		.word	Comm_slRdBufIndexTmp
 1282 06e8 00000000 		.word	Comm_slRdBufIndex
 1283 06ec 880F0640 		.word	1074139016
 1284 06f0 04020640 		.word	1074135556
 1285 06f4 FFFFFEFF 		.word	-65537
 1286 06f8 60000640 		.word	1074135136
 1287 06fc 08030640 		.word	1074135816
 1288 0700 00000000 		.word	Comm_acceptAddr
 1289 0704 00000000 		.word	Comm_slWrBufIndex
 1290 0708 00000000 		.word	Comm_slWrBufPtr
 1291 070c 40030640 		.word	1074135872
 1292 0710 FF5FFFFF 		.word	-40961
 1293 0714 C00F0640 		.word	1074139072
 1294 0718 C80F0640 		.word	1074139080
 1295 071c ED0F0000 		.word	4077
 1296 0720 800E0640 		.word	1074138752
 1297 0724 FF0F0000 		.word	4095
 1298 0728 00000000 		.word	Comm_customAddressHandler
 1299 072c 64000640 		.word	1074135140
 1300 0730 00000000 		.word	Comm_slWrBufSize
 1301 0734 6C000640 		.word	1074135148
 1302 0738 CC0F0640 		.word	1074139084
 1303 073c 8C0F0640 		.word	1074139020
 1304 0740 00000000 		.word	Comm_slRdBufPtr
 1305 0744 00000000 		.word	Comm_slRdBufSize
 1306 0748 40020640 		.word	1074135616
 1307 074c 800F0640 		.word	1074139008
 1308 0750 00000640 		.word	1074135040
 1309 0754 FFFCFFFF 		.word	-769
 1310 0758 F3070000 		.word	2035
 1311 075c 17030000 		.word	791
 1312 0760 000F0640 		.word	1074138880
 1313 0764 FFFEFFFF 		.word	-257
 1314              		.cfi_endproc
 1315              	.LFE0:
 1316              		.size	Comm_I2C_ISR, .-Comm_I2C_ISR
 1317              		.text
 1318              	.Letext0:
 1319              		.file 2 "Generated_Source\\PSoC4/cytypes.h"
 1320              		.file 3 "Generated_Source\\PSoC4\\Comm_PVT.h"
 1321              		.file 4 "Generated_Source\\PSoC4\\Comm_I2C_PVT.h"
 1322              		.file 5 "Generated_Source\\PSoC4\\Comm.h"
 1323              		.section	.debug_info,"",%progbits
 1324              	.Ldebug_info0:
 1325 0000 41020000 		.4byte	0x241
 1326 0004 0400     		.2byte	0x4
 1327 0006 00000000 		.4byte	.Ldebug_abbrev0
 1328 000a 04       		.byte	0x4
 1329 000b 01       		.uleb128 0x1
 1330 000c 26000000 		.4byte	.LASF44
 1331 0010 01       		.byte	0x1
 1332 0011 27020000 		.4byte	.LASF45
 1333 0015 13030000 		.4byte	.LASF46
 1334 0019 00000000 		.4byte	.Ldebug_ranges0+0
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 40


 1335 001d 00000000 		.4byte	0
 1336 0021 00000000 		.4byte	.Ldebug_line0
 1337 0025 02       		.uleb128 0x2
 1338 0026 01       		.byte	0x1
 1339 0027 06       		.byte	0x6
 1340 0028 94030000 		.4byte	.LASF0
 1341 002c 02       		.uleb128 0x2
 1342 002d 01       		.byte	0x1
 1343 002e 08       		.byte	0x8
 1344 002f 2B010000 		.4byte	.LASF1
 1345 0033 02       		.uleb128 0x2
 1346 0034 02       		.byte	0x2
 1347 0035 05       		.byte	0x5
 1348 0036 09030000 		.4byte	.LASF2
 1349 003a 02       		.uleb128 0x2
 1350 003b 02       		.byte	0x2
 1351 003c 07       		.byte	0x7
 1352 003d C4000000 		.4byte	.LASF3
 1353 0041 02       		.uleb128 0x2
 1354 0042 04       		.byte	0x4
 1355 0043 05       		.byte	0x5
 1356 0044 8B030000 		.4byte	.LASF4
 1357 0048 02       		.uleb128 0x2
 1358 0049 04       		.byte	0x4
 1359 004a 07       		.byte	0x7
 1360 004b 08020000 		.4byte	.LASF5
 1361 004f 02       		.uleb128 0x2
 1362 0050 08       		.byte	0x8
 1363 0051 05       		.byte	0x5
 1364 0052 93020000 		.4byte	.LASF6
 1365 0056 02       		.uleb128 0x2
 1366 0057 08       		.byte	0x8
 1367 0058 07       		.byte	0x7
 1368 0059 4D020000 		.4byte	.LASF7
 1369 005d 03       		.uleb128 0x3
 1370 005e 04       		.byte	0x4
 1371 005f 05       		.byte	0x5
 1372 0060 696E7400 		.ascii	"int\000"
 1373 0064 02       		.uleb128 0x2
 1374 0065 04       		.byte	0x4
 1375 0066 07       		.byte	0x7
 1376 0067 1A020000 		.4byte	.LASF8
 1377 006b 04       		.uleb128 0x4
 1378 006c 66010000 		.4byte	.LASF9
 1379 0070 02       		.byte	0x2
 1380 0071 B901     		.2byte	0x1b9
 1381 0073 2C000000 		.4byte	0x2c
 1382 0077 04       		.uleb128 0x4
 1383 0078 EE010000 		.4byte	.LASF10
 1384 007c 02       		.byte	0x2
 1385 007d BA01     		.2byte	0x1ba
 1386 007f 3A000000 		.4byte	0x3a
 1387 0083 04       		.uleb128 0x4
 1388 0084 F5010000 		.4byte	.LASF11
 1389 0088 02       		.byte	0x2
 1390 0089 BB01     		.2byte	0x1bb
 1391 008b 48000000 		.4byte	0x48
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 41


 1392 008f 02       		.uleb128 0x2
 1393 0090 04       		.byte	0x4
 1394 0091 04       		.byte	0x4
 1395 0092 0E010000 		.4byte	.LASF12
 1396 0096 02       		.uleb128 0x2
 1397 0097 08       		.byte	0x8
 1398 0098 04       		.byte	0x4
 1399 0099 B2010000 		.4byte	.LASF13
 1400 009d 02       		.uleb128 0x2
 1401 009e 01       		.byte	0x1
 1402 009f 08       		.byte	0x8
 1403 00a0 BD020000 		.4byte	.LASF14
 1404 00a4 05       		.uleb128 0x5
 1405 00a5 6B000000 		.4byte	0x6b
 1406 00a9 05       		.uleb128 0x5
 1407 00aa 77000000 		.4byte	0x77
 1408 00ae 04       		.uleb128 0x4
 1409 00af 20000000 		.4byte	.LASF15
 1410 00b3 02       		.byte	0x2
 1411 00b4 6502     		.2byte	0x265
 1412 00b6 BA000000 		.4byte	0xba
 1413 00ba 05       		.uleb128 0x5
 1414 00bb 83000000 		.4byte	0x83
 1415 00bf 04       		.uleb128 0x4
 1416 00c0 74020000 		.4byte	.LASF16
 1417 00c4 02       		.byte	0x2
 1418 00c5 7502     		.2byte	0x275
 1419 00c7 CB000000 		.4byte	0xcb
 1420 00cb 06       		.uleb128 0x6
 1421 00cc 04       		.byte	0x4
 1422 00cd D1000000 		.4byte	0xd1
 1423 00d1 07       		.uleb128 0x7
 1424 00d2 02       		.uleb128 0x2
 1425 00d3 04       		.byte	0x4
 1426 00d4 07       		.byte	0x7
 1427 00d5 8A020000 		.4byte	.LASF17
 1428 00d9 08       		.uleb128 0x8
 1429 00da A5010000 		.4byte	.LASF47
 1430 00de 01       		.byte	0x1
 1431 00df 1F       		.byte	0x1f
 1432 00e0 00000000 		.4byte	.LFB0
 1433 00e4 68070000 		.4byte	.LFE0-.LFB0
 1434 00e8 01       		.uleb128 0x1
 1435 00e9 9C       		.byte	0x9c
 1436 00ea 2E010000 		.4byte	0x12e
 1437 00ee 09       		.uleb128 0x9
 1438 00ef 5C010000 		.4byte	.LASF18
 1439 00f3 01       		.byte	0x1
 1440 00f4 21       		.byte	0x21
 1441 00f5 83000000 		.4byte	0x83
 1442 00f9 00000000 		.4byte	.LLST0
 1443 00fd 09       		.uleb128 0x9
 1444 00fe FC010000 		.4byte	.LASF19
 1445 0102 01       		.byte	0x1
 1446 0103 22       		.byte	0x22
 1447 0104 83000000 		.4byte	0x83
 1448 0108 77000000 		.4byte	.LLST1
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 42


 1449 010c 09       		.uleb128 0x9
 1450 010d 81020000 		.4byte	.LASF20
 1451 0111 01       		.byte	0x1
 1452 0112 29       		.byte	0x29
 1453 0113 83000000 		.4byte	0x83
 1454 0117 87010000 		.4byte	.LLST2
 1455 011b 0A       		.uleb128 0xa
 1456 011c F4040000 		.4byte	.LVL48
 1457 0120 3C020000 		.4byte	0x23c
 1458 0124 0A       		.uleb128 0xa
 1459 0125 E8050000 		.4byte	.LVL60
 1460 0129 3C020000 		.4byte	0x23c
 1461 012d 00       		.byte	0
 1462 012e 0B       		.uleb128 0xb
 1463 012f 14010000 		.4byte	.LASF21
 1464 0133 03       		.byte	0x3
 1465 0134 3B       		.byte	0x3b
 1466 0135 BF000000 		.4byte	0xbf
 1467 0139 0B       		.uleb128 0xb
 1468 013a D7000000 		.4byte	.LASF22
 1469 013e 03       		.byte	0x3
 1470 013f 48       		.byte	0x48
 1471 0140 6B000000 		.4byte	0x6b
 1472 0144 0B       		.uleb128 0xb
 1473 0145 B4000000 		.4byte	.LASF23
 1474 0149 03       		.byte	0x3
 1475 014a 49       		.byte	0x49
 1476 014b 6B000000 		.4byte	0x6b
 1477 014f 0B       		.uleb128 0xb
 1478 0150 E3010000 		.4byte	.LASF24
 1479 0154 04       		.byte	0x4
 1480 0155 1E       		.byte	0x1e
 1481 0156 A4000000 		.4byte	0xa4
 1482 015a 0B       		.uleb128 0xb
 1483 015b 12000000 		.4byte	.LASF25
 1484 015f 04       		.byte	0x4
 1485 0160 21       		.byte	0x21
 1486 0161 A4000000 		.4byte	0xa4
 1487 0165 0B       		.uleb128 0xb
 1488 0166 64020000 		.4byte	.LASF26
 1489 016a 04       		.byte	0x4
 1490 016b 24       		.byte	0x24
 1491 016c 70010000 		.4byte	0x170
 1492 0170 06       		.uleb128 0x6
 1493 0171 04       		.byte	0x4
 1494 0172 A4000000 		.4byte	0xa4
 1495 0176 0B       		.uleb128 0xb
 1496 0177 4B010000 		.4byte	.LASF27
 1497 017b 04       		.byte	0x4
 1498 017c 25       		.byte	0x25
 1499 017d BA000000 		.4byte	0xba
 1500 0181 0B       		.uleb128 0xb
 1501 0182 C2020000 		.4byte	.LASF28
 1502 0186 04       		.byte	0x4
 1503 0187 26       		.byte	0x26
 1504 0188 BA000000 		.4byte	0xba
 1505 018c 0B       		.uleb128 0xb
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 43


 1506 018d 95010000 		.4byte	.LASF29
 1507 0191 04       		.byte	0x4
 1508 0192 29       		.byte	0x29
 1509 0193 70010000 		.4byte	0x170
 1510 0197 0B       		.uleb128 0xb
 1511 0198 C7030000 		.4byte	.LASF30
 1512 019c 04       		.byte	0x4
 1513 019d 2A       		.byte	0x2a
 1514 019e BA000000 		.4byte	0xba
 1515 01a2 0B       		.uleb128 0xb
 1516 01a3 B5030000 		.4byte	.LASF31
 1517 01a7 04       		.byte	0x4
 1518 01a8 2B       		.byte	0x2b
 1519 01a9 BA000000 		.4byte	0xba
 1520 01ad 0B       		.uleb128 0xb
 1521 01ae A0030000 		.4byte	.LASF32
 1522 01b2 04       		.byte	0x4
 1523 01b3 2C       		.byte	0x2c
 1524 01b4 BA000000 		.4byte	0xba
 1525 01b8 0B       		.uleb128 0xb
 1526 01b9 6C010000 		.4byte	.LASF33
 1527 01bd 04       		.byte	0x4
 1528 01be 2D       		.byte	0x2d
 1529 01bf A4000000 		.4byte	0xa4
 1530 01c3 0B       		.uleb128 0xb
 1531 01c4 F9020000 		.4byte	.LASF34
 1532 01c8 04       		.byte	0x4
 1533 01c9 31       		.byte	0x31
 1534 01ca A9000000 		.4byte	0xa9
 1535 01ce 0B       		.uleb128 0xb
 1536 01cf D4020000 		.4byte	.LASF35
 1537 01d3 04       		.byte	0x4
 1538 01d4 32       		.byte	0x32
 1539 01d5 A4000000 		.4byte	0xa4
 1540 01d9 0B       		.uleb128 0xb
 1541 01da 00000000 		.4byte	.LASF36
 1542 01de 04       		.byte	0x4
 1543 01df 35       		.byte	0x35
 1544 01e0 70010000 		.4byte	0x170
 1545 01e4 0B       		.uleb128 0xb
 1546 01e5 E1000000 		.4byte	.LASF37
 1547 01e9 04       		.byte	0x4
 1548 01ea 36       		.byte	0x36
 1549 01eb BA000000 		.4byte	0xba
 1550 01ef 0B       		.uleb128 0xb
 1551 01f0 E5020000 		.4byte	.LASF38
 1552 01f4 04       		.byte	0x4
 1553 01f5 37       		.byte	0x37
 1554 01f6 BA000000 		.4byte	0xba
 1555 01fa 0B       		.uleb128 0xb
 1556 01fb 39010000 		.4byte	.LASF39
 1557 01ff 04       		.byte	0x4
 1558 0200 3A       		.byte	0x3a
 1559 0201 70010000 		.4byte	0x170
 1560 0205 0B       		.uleb128 0xb
 1561 0206 B9010000 		.4byte	.LASF40
 1562 020a 04       		.byte	0x4
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 44


 1563 020b 3B       		.byte	0x3b
 1564 020c BA000000 		.4byte	0xba
 1565 0210 0B       		.uleb128 0xb
 1566 0211 81010000 		.4byte	.LASF41
 1567 0215 04       		.byte	0x4
 1568 0216 3C       		.byte	0x3c
 1569 0217 BA000000 		.4byte	0xba
 1570 021b 0B       		.uleb128 0xb
 1571 021c CC010000 		.4byte	.LASF42
 1572 0220 04       		.byte	0x4
 1573 0221 3D       		.byte	0x3d
 1574 0222 BA000000 		.4byte	0xba
 1575 0226 0C       		.uleb128 0xc
 1576 0227 83000000 		.4byte	0x83
 1577 022b 0B       		.uleb128 0xb
 1578 022c F4000000 		.4byte	.LASF43
 1579 0230 04       		.byte	0x4
 1580 0231 41       		.byte	0x41
 1581 0232 36020000 		.4byte	0x236
 1582 0236 06       		.uleb128 0x6
 1583 0237 04       		.byte	0x4
 1584 0238 26020000 		.4byte	0x226
 1585 023c 0D       		.uleb128 0xd
 1586 023d A1020000 		.4byte	.LASF48
 1587 0241 05       		.byte	0x5
 1588 0242 1507     		.2byte	0x715
 1589 0244 00       		.byte	0
 1590              		.section	.debug_abbrev,"",%progbits
 1591              	.Ldebug_abbrev0:
 1592 0000 01       		.uleb128 0x1
 1593 0001 11       		.uleb128 0x11
 1594 0002 01       		.byte	0x1
 1595 0003 25       		.uleb128 0x25
 1596 0004 0E       		.uleb128 0xe
 1597 0005 13       		.uleb128 0x13
 1598 0006 0B       		.uleb128 0xb
 1599 0007 03       		.uleb128 0x3
 1600 0008 0E       		.uleb128 0xe
 1601 0009 1B       		.uleb128 0x1b
 1602 000a 0E       		.uleb128 0xe
 1603 000b 55       		.uleb128 0x55
 1604 000c 17       		.uleb128 0x17
 1605 000d 11       		.uleb128 0x11
 1606 000e 01       		.uleb128 0x1
 1607 000f 10       		.uleb128 0x10
 1608 0010 17       		.uleb128 0x17
 1609 0011 00       		.byte	0
 1610 0012 00       		.byte	0
 1611 0013 02       		.uleb128 0x2
 1612 0014 24       		.uleb128 0x24
 1613 0015 00       		.byte	0
 1614 0016 0B       		.uleb128 0xb
 1615 0017 0B       		.uleb128 0xb
 1616 0018 3E       		.uleb128 0x3e
 1617 0019 0B       		.uleb128 0xb
 1618 001a 03       		.uleb128 0x3
 1619 001b 0E       		.uleb128 0xe
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 45


 1620 001c 00       		.byte	0
 1621 001d 00       		.byte	0
 1622 001e 03       		.uleb128 0x3
 1623 001f 24       		.uleb128 0x24
 1624 0020 00       		.byte	0
 1625 0021 0B       		.uleb128 0xb
 1626 0022 0B       		.uleb128 0xb
 1627 0023 3E       		.uleb128 0x3e
 1628 0024 0B       		.uleb128 0xb
 1629 0025 03       		.uleb128 0x3
 1630 0026 08       		.uleb128 0x8
 1631 0027 00       		.byte	0
 1632 0028 00       		.byte	0
 1633 0029 04       		.uleb128 0x4
 1634 002a 16       		.uleb128 0x16
 1635 002b 00       		.byte	0
 1636 002c 03       		.uleb128 0x3
 1637 002d 0E       		.uleb128 0xe
 1638 002e 3A       		.uleb128 0x3a
 1639 002f 0B       		.uleb128 0xb
 1640 0030 3B       		.uleb128 0x3b
 1641 0031 05       		.uleb128 0x5
 1642 0032 49       		.uleb128 0x49
 1643 0033 13       		.uleb128 0x13
 1644 0034 00       		.byte	0
 1645 0035 00       		.byte	0
 1646 0036 05       		.uleb128 0x5
 1647 0037 35       		.uleb128 0x35
 1648 0038 00       		.byte	0
 1649 0039 49       		.uleb128 0x49
 1650 003a 13       		.uleb128 0x13
 1651 003b 00       		.byte	0
 1652 003c 00       		.byte	0
 1653 003d 06       		.uleb128 0x6
 1654 003e 0F       		.uleb128 0xf
 1655 003f 00       		.byte	0
 1656 0040 0B       		.uleb128 0xb
 1657 0041 0B       		.uleb128 0xb
 1658 0042 49       		.uleb128 0x49
 1659 0043 13       		.uleb128 0x13
 1660 0044 00       		.byte	0
 1661 0045 00       		.byte	0
 1662 0046 07       		.uleb128 0x7
 1663 0047 15       		.uleb128 0x15
 1664 0048 00       		.byte	0
 1665 0049 27       		.uleb128 0x27
 1666 004a 19       		.uleb128 0x19
 1667 004b 00       		.byte	0
 1668 004c 00       		.byte	0
 1669 004d 08       		.uleb128 0x8
 1670 004e 2E       		.uleb128 0x2e
 1671 004f 01       		.byte	0x1
 1672 0050 3F       		.uleb128 0x3f
 1673 0051 19       		.uleb128 0x19
 1674 0052 03       		.uleb128 0x3
 1675 0053 0E       		.uleb128 0xe
 1676 0054 3A       		.uleb128 0x3a
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 46


 1677 0055 0B       		.uleb128 0xb
 1678 0056 3B       		.uleb128 0x3b
 1679 0057 0B       		.uleb128 0xb
 1680 0058 27       		.uleb128 0x27
 1681 0059 19       		.uleb128 0x19
 1682 005a 11       		.uleb128 0x11
 1683 005b 01       		.uleb128 0x1
 1684 005c 12       		.uleb128 0x12
 1685 005d 06       		.uleb128 0x6
 1686 005e 40       		.uleb128 0x40
 1687 005f 18       		.uleb128 0x18
 1688 0060 9642     		.uleb128 0x2116
 1689 0062 19       		.uleb128 0x19
 1690 0063 01       		.uleb128 0x1
 1691 0064 13       		.uleb128 0x13
 1692 0065 00       		.byte	0
 1693 0066 00       		.byte	0
 1694 0067 09       		.uleb128 0x9
 1695 0068 34       		.uleb128 0x34
 1696 0069 00       		.byte	0
 1697 006a 03       		.uleb128 0x3
 1698 006b 0E       		.uleb128 0xe
 1699 006c 3A       		.uleb128 0x3a
 1700 006d 0B       		.uleb128 0xb
 1701 006e 3B       		.uleb128 0x3b
 1702 006f 0B       		.uleb128 0xb
 1703 0070 49       		.uleb128 0x49
 1704 0071 13       		.uleb128 0x13
 1705 0072 02       		.uleb128 0x2
 1706 0073 17       		.uleb128 0x17
 1707 0074 00       		.byte	0
 1708 0075 00       		.byte	0
 1709 0076 0A       		.uleb128 0xa
 1710 0077 898201   		.uleb128 0x4109
 1711 007a 00       		.byte	0
 1712 007b 11       		.uleb128 0x11
 1713 007c 01       		.uleb128 0x1
 1714 007d 31       		.uleb128 0x31
 1715 007e 13       		.uleb128 0x13
 1716 007f 00       		.byte	0
 1717 0080 00       		.byte	0
 1718 0081 0B       		.uleb128 0xb
 1719 0082 34       		.uleb128 0x34
 1720 0083 00       		.byte	0
 1721 0084 03       		.uleb128 0x3
 1722 0085 0E       		.uleb128 0xe
 1723 0086 3A       		.uleb128 0x3a
 1724 0087 0B       		.uleb128 0xb
 1725 0088 3B       		.uleb128 0x3b
 1726 0089 0B       		.uleb128 0xb
 1727 008a 49       		.uleb128 0x49
 1728 008b 13       		.uleb128 0x13
 1729 008c 3F       		.uleb128 0x3f
 1730 008d 19       		.uleb128 0x19
 1731 008e 3C       		.uleb128 0x3c
 1732 008f 19       		.uleb128 0x19
 1733 0090 00       		.byte	0
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 47


 1734 0091 00       		.byte	0
 1735 0092 0C       		.uleb128 0xc
 1736 0093 15       		.uleb128 0x15
 1737 0094 00       		.byte	0
 1738 0095 27       		.uleb128 0x27
 1739 0096 19       		.uleb128 0x19
 1740 0097 49       		.uleb128 0x49
 1741 0098 13       		.uleb128 0x13
 1742 0099 00       		.byte	0
 1743 009a 00       		.byte	0
 1744 009b 0D       		.uleb128 0xd
 1745 009c 2E       		.uleb128 0x2e
 1746 009d 00       		.byte	0
 1747 009e 3F       		.uleb128 0x3f
 1748 009f 19       		.uleb128 0x19
 1749 00a0 03       		.uleb128 0x3
 1750 00a1 0E       		.uleb128 0xe
 1751 00a2 3A       		.uleb128 0x3a
 1752 00a3 0B       		.uleb128 0xb
 1753 00a4 3B       		.uleb128 0x3b
 1754 00a5 05       		.uleb128 0x5
 1755 00a6 27       		.uleb128 0x27
 1756 00a7 19       		.uleb128 0x19
 1757 00a8 3C       		.uleb128 0x3c
 1758 00a9 19       		.uleb128 0x19
 1759 00aa 00       		.byte	0
 1760 00ab 00       		.byte	0
 1761 00ac 00       		.byte	0
 1762              		.section	.debug_loc,"",%progbits
 1763              	.Ldebug_loc0:
 1764              	.LLST0:
 1765 0000 B4010000 		.4byte	.LVL24
 1766 0004 BE010000 		.4byte	.LVL25
 1767 0008 0100     		.2byte	0x1
 1768 000a 52       		.byte	0x52
 1769 000b C6010000 		.4byte	.LVL27
 1770 000f C8010000 		.4byte	.LVL28
 1771 0013 0200     		.2byte	0x2
 1772 0015 38       		.byte	0x38
 1773 0016 9F       		.byte	0x9f
 1774 0017 CA010000 		.4byte	.LVL29
 1775 001b E8010000 		.4byte	.LVL31
 1776 001f 0100     		.2byte	0x1
 1777 0021 52       		.byte	0x52
 1778 0022 D8030000 		.4byte	.LVL41
 1779 0026 E6030000 		.4byte	.LVL42
 1780 002a 0100     		.2byte	0x1
 1781 002c 53       		.byte	0x53
 1782 002d EC030000 		.4byte	.LVL43
 1783 0031 F2030000 		.4byte	.LVL44
 1784 0035 0100     		.2byte	0x1
 1785 0037 53       		.byte	0x53
 1786 0038 24050000 		.4byte	.LVL49
 1787 003c 32050000 		.4byte	.LVL50
 1788 0040 0100     		.2byte	0x1
 1789 0042 53       		.byte	0x53
 1790 0043 3A050000 		.4byte	.LVL51
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 48


 1791 0047 3E050000 		.4byte	.LVL52
 1792 004b 0100     		.2byte	0x1
 1793 004d 53       		.byte	0x53
 1794 004e 74050000 		.4byte	.LVL53
 1795 0052 B4050000 		.4byte	.LVL56
 1796 0056 0100     		.2byte	0x1
 1797 0058 53       		.byte	0x53
 1798 0059 C0050000 		.4byte	.LVL57
 1799 005d D0050000 		.4byte	.LVL58
 1800 0061 0100     		.2byte	0x1
 1801 0063 52       		.byte	0x52
 1802 0064 E4050000 		.4byte	.LVL59
 1803 0068 E7050000 		.4byte	.LVL60-1
 1804 006c 0100     		.2byte	0x1
 1805 006e 52       		.byte	0x52
 1806 006f 00000000 		.4byte	0
 1807 0073 00000000 		.4byte	0
 1808              	.LLST1:
 1809 0077 00000000 		.4byte	.LVL0
 1810 007b 2C000000 		.4byte	.LVL2
 1811 007f 0200     		.2byte	0x2
 1812 0081 30       		.byte	0x30
 1813 0082 9F       		.byte	0x9f
 1814 0083 30000000 		.4byte	.LVL3
 1815 0087 48000000 		.4byte	.LVL4
 1816 008b 0200     		.2byte	0x2
 1817 008d 30       		.byte	0x30
 1818 008e 9F       		.byte	0x9f
 1819 008f 48000000 		.4byte	.LVL4
 1820 0093 4A000000 		.4byte	.LVL5
 1821 0097 0200     		.2byte	0x2
 1822 0099 31       		.byte	0x31
 1823 009a 9F       		.byte	0x9f
 1824 009b 4A000000 		.4byte	.LVL5
 1825 009f 5C000000 		.4byte	.LVL6
 1826 00a3 0100     		.2byte	0x1
 1827 00a5 53       		.byte	0x53
 1828 00a6 60000000 		.4byte	.LVL7
 1829 00aa 68000000 		.4byte	.LVL8
 1830 00ae 0200     		.2byte	0x2
 1831 00b0 31       		.byte	0x31
 1832 00b1 9F       		.byte	0x9f
 1833 00b2 68000000 		.4byte	.LVL8
 1834 00b6 6C000000 		.4byte	.LVL9
 1835 00ba 0100     		.2byte	0x1
 1836 00bc 53       		.byte	0x53
 1837 00bd 80000000 		.4byte	.LVL10
 1838 00c1 82000000 		.4byte	.LVL11
 1839 00c5 0200     		.2byte	0x2
 1840 00c7 31       		.byte	0x31
 1841 00c8 9F       		.byte	0x9f
 1842 00c9 82000000 		.4byte	.LVL11
 1843 00cd 86000000 		.4byte	.LVL12
 1844 00d1 0100     		.2byte	0x1
 1845 00d3 53       		.byte	0x53
 1846 00d4 B6000000 		.4byte	.LVL13
 1847 00d8 B8000000 		.4byte	.LVL14
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 49


 1848 00dc 0200     		.2byte	0x2
 1849 00de 31       		.byte	0x31
 1850 00df 9F       		.byte	0x9f
 1851 00e0 D6000000 		.4byte	.LVL15
 1852 00e4 0E010000 		.4byte	.LVL16
 1853 00e8 0200     		.2byte	0x2
 1854 00ea 30       		.byte	0x30
 1855 00eb 9F       		.byte	0x9f
 1856 00ec 12010000 		.4byte	.LVL17
 1857 00f0 32010000 		.4byte	.LVL18
 1858 00f4 0100     		.2byte	0x1
 1859 00f6 53       		.byte	0x53
 1860 00f7 48010000 		.4byte	.LVL19
 1861 00fb 56010000 		.4byte	.LVL20
 1862 00ff 0100     		.2byte	0x1
 1863 0101 53       		.byte	0x53
 1864 0102 64010000 		.4byte	.LVL21
 1865 0106 68010000 		.4byte	.LVL22
 1866 010a 0200     		.2byte	0x2
 1867 010c 31       		.byte	0x31
 1868 010d 9F       		.byte	0x9f
 1869 010e 68010000 		.4byte	.LVL22
 1870 0112 C0010000 		.4byte	.LVL26
 1871 0116 0100     		.2byte	0x1
 1872 0118 53       		.byte	0x53
 1873 0119 C6010000 		.4byte	.LVL27
 1874 011d C8010000 		.4byte	.LVL28
 1875 0121 0200     		.2byte	0x2
 1876 0123 31       		.byte	0x31
 1877 0124 9F       		.byte	0x9f
 1878 0125 CA010000 		.4byte	.LVL29
 1879 0129 28020000 		.4byte	.LVL33
 1880 012d 0100     		.2byte	0x1
 1881 012f 53       		.byte	0x53
 1882 0130 68020000 		.4byte	.LVL34
 1883 0134 BE020000 		.4byte	.LVL35
 1884 0138 0100     		.2byte	0x1
 1885 013a 53       		.byte	0x53
 1886 013b C4020000 		.4byte	.LVL36
 1887 013f C6020000 		.4byte	.LVL37
 1888 0143 0200     		.2byte	0x2
 1889 0145 31       		.byte	0x31
 1890 0146 9F       		.byte	0x9f
 1891 0147 C6020000 		.4byte	.LVL37
 1892 014b CC020000 		.4byte	.LVL38
 1893 014f 0100     		.2byte	0x1
 1894 0151 53       		.byte	0x53
 1895 0152 A4030000 		.4byte	.LVL39
 1896 0156 B2030000 		.4byte	.LVL40
 1897 015a 0100     		.2byte	0x1
 1898 015c 53       		.byte	0x53
 1899 015d 7E050000 		.4byte	.LVL54
 1900 0161 B4050000 		.4byte	.LVL56
 1901 0165 0100     		.2byte	0x1
 1902 0167 54       		.byte	0x54
 1903 0168 4E060000 		.4byte	.LVL61
 1904 016c 54060000 		.4byte	.LVL62
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 50


 1905 0170 0100     		.2byte	0x1
 1906 0172 53       		.byte	0x53
 1907 0173 98060000 		.4byte	.LVL63
 1908 0177 CE060000 		.4byte	.LVL64
 1909 017b 0200     		.2byte	0x2
 1910 017d 31       		.byte	0x31
 1911 017e 9F       		.byte	0x9f
 1912 017f 00000000 		.4byte	0
 1913 0183 00000000 		.4byte	0
 1914              	.LLST2:
 1915 0187 00000000 		.4byte	.LVL0
 1916 018b DE040000 		.4byte	.LVL45
 1917 018f 0200     		.2byte	0x2
 1918 0191 30       		.byte	0x30
 1919 0192 9F       		.byte	0x9f
 1920 0193 DE040000 		.4byte	.LVL45
 1921 0197 E0040000 		.4byte	.LVL46
 1922 019b 0100     		.2byte	0x1
 1923 019d 50       		.byte	0x50
 1924 019e E0040000 		.4byte	.LVL46
 1925 01a2 E4040000 		.4byte	.LVL47
 1926 01a6 0200     		.2byte	0x2
 1927 01a8 30       		.byte	0x30
 1928 01a9 9F       		.byte	0x9f
 1929 01aa E4040000 		.4byte	.LVL47
 1930 01ae F3040000 		.4byte	.LVL48-1
 1931 01b2 0100     		.2byte	0x1
 1932 01b4 50       		.byte	0x50
 1933 01b5 4E060000 		.4byte	.LVL61
 1934 01b9 CE060000 		.4byte	.LVL64
 1935 01bd 0200     		.2byte	0x2
 1936 01bf 30       		.byte	0x30
 1937 01c0 9F       		.byte	0x9f
 1938 01c1 00000000 		.4byte	0
 1939 01c5 00000000 		.4byte	0
 1940              		.section	.debug_aranges,"",%progbits
 1941 0000 1C000000 		.4byte	0x1c
 1942 0004 0200     		.2byte	0x2
 1943 0006 00000000 		.4byte	.Ldebug_info0
 1944 000a 04       		.byte	0x4
 1945 000b 00       		.byte	0
 1946 000c 0000     		.2byte	0
 1947 000e 0000     		.2byte	0
 1948 0010 00000000 		.4byte	.LFB0
 1949 0014 68070000 		.4byte	.LFE0-.LFB0
 1950 0018 00000000 		.4byte	0
 1951 001c 00000000 		.4byte	0
 1952              		.section	.debug_ranges,"",%progbits
 1953              	.Ldebug_ranges0:
 1954 0000 00000000 		.4byte	.LFB0
 1955 0004 68070000 		.4byte	.LFE0
 1956 0008 00000000 		.4byte	0
 1957 000c 00000000 		.4byte	0
 1958              		.section	.debug_line,"",%progbits
 1959              	.Ldebug_line0:
 1960 0000 24020000 		.section	.debug_str,"MS",%progbits,1
 1960      02007300 
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 51


 1960      00000201 
 1960      FB0E0D00 
 1960      01010101 
 1961              	.LASF36:
 1962 0000 436F6D6D 		.ascii	"Comm_mstrRdBufPtr\000"
 1962      5F6D7374 
 1962      72526442 
 1962      75665074 
 1962      7200
 1963              	.LASF25:
 1964 0012 436F6D6D 		.ascii	"Comm_slStatus\000"
 1964      5F736C53 
 1964      74617475 
 1964      7300
 1965              	.LASF15:
 1966 0020 72656733 		.ascii	"reg32\000"
 1966      3200
 1967              	.LASF44:
 1968 0026 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1968      4320342E 
 1968      392E3320 
 1968      32303135 
 1968      30333033 
 1969 0059 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 1969      20726576 
 1969      6973696F 
 1969      6E203232 
 1969      31323230 
 1970 008c 73202D66 		.ascii	"s -ffunction-sections -ffat-lto-objects\000"
 1970      66756E63 
 1970      74696F6E 
 1970      2D736563 
 1970      74696F6E 
 1971              	.LASF23:
 1972 00b4 436F6D6D 		.ascii	"Comm_acceptAddr\000"
 1972      5F616363 
 1972      65707441 
 1972      64647200 
 1973              	.LASF3:
 1974 00c4 73686F72 		.ascii	"short unsigned int\000"
 1974      7420756E 
 1974      7369676E 
 1974      65642069 
 1974      6E7400
 1975              	.LASF22:
 1976 00d7 436F6D6D 		.ascii	"Comm_mode\000"
 1976      5F6D6F64 
 1976      6500
 1977              	.LASF37:
 1978 00e1 436F6D6D 		.ascii	"Comm_mstrRdBufSize\000"
 1978      5F6D7374 
 1978      72526442 
 1978      75665369 
 1978      7A6500
 1979              	.LASF43:
 1980 00f4 436F6D6D 		.ascii	"Comm_customAddressHandler\000"
 1980      5F637573 
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 52


 1980      746F6D41 
 1980      64647265 
 1980      73734861 
 1981              	.LASF12:
 1982 010e 666C6F61 		.ascii	"float\000"
 1982      7400
 1983              	.LASF21:
 1984 0114 436F6D6D 		.ascii	"Comm_customIntrHandler\000"
 1984      5F637573 
 1984      746F6D49 
 1984      6E747248 
 1984      616E646C 
 1985              	.LASF1:
 1986 012b 756E7369 		.ascii	"unsigned char\000"
 1986      676E6564 
 1986      20636861 
 1986      7200
 1987              	.LASF39:
 1988 0139 436F6D6D 		.ascii	"Comm_mstrWrBufPtr\000"
 1988      5F6D7374 
 1988      72577242 
 1988      75665074 
 1988      7200
 1989              	.LASF27:
 1990 014b 436F6D6D 		.ascii	"Comm_slWrBufSize\000"
 1990      5F736C57 
 1990      72427566 
 1990      53697A65 
 1990      00
 1991              	.LASF18:
 1992 015c 64696666 		.ascii	"diffCount\000"
 1992      436F756E 
 1992      7400
 1993              	.LASF9:
 1994 0166 75696E74 		.ascii	"uint8\000"
 1994      3800
 1995              	.LASF33:
 1996 016c 436F6D6D 		.ascii	"Comm_slOverFlowCount\000"
 1996      5F736C4F 
 1996      76657246 
 1996      6C6F7743 
 1996      6F756E74 
 1997              	.LASF41:
 1998 0181 436F6D6D 		.ascii	"Comm_mstrWrBufIndex\000"
 1998      5F6D7374 
 1998      72577242 
 1998      7566496E 
 1998      64657800 
 1999              	.LASF29:
 2000 0195 436F6D6D 		.ascii	"Comm_slRdBufPtr\000"
 2000      5F736C52 
 2000      64427566 
 2000      50747200 
 2001              	.LASF47:
 2002 01a5 436F6D6D 		.ascii	"Comm_I2C_ISR\000"
 2002      5F493243 
 2002      5F495352 
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 53


 2002      00
 2003              	.LASF13:
 2004 01b2 646F7562 		.ascii	"double\000"
 2004      6C6500
 2005              	.LASF40:
 2006 01b9 436F6D6D 		.ascii	"Comm_mstrWrBufSize\000"
 2006      5F6D7374 
 2006      72577242 
 2006      75665369 
 2006      7A6500
 2007              	.LASF42:
 2008 01cc 436F6D6D 		.ascii	"Comm_mstrWrBufIndexTmp\000"
 2008      5F6D7374 
 2008      72577242 
 2008      7566496E 
 2008      64657854 
 2009              	.LASF24:
 2010 01e3 436F6D6D 		.ascii	"Comm_state\000"
 2010      5F737461 
 2010      746500
 2011              	.LASF10:
 2012 01ee 75696E74 		.ascii	"uint16\000"
 2012      313600
 2013              	.LASF11:
 2014 01f5 75696E74 		.ascii	"uint32\000"
 2014      333200
 2015              	.LASF19:
 2016 01fc 656E6454 		.ascii	"endTransfer\000"
 2016      72616E73 
 2016      66657200 
 2017              	.LASF5:
 2018 0208 6C6F6E67 		.ascii	"long unsigned int\000"
 2018      20756E73 
 2018      69676E65 
 2018      6420696E 
 2018      7400
 2019              	.LASF8:
 2020 021a 756E7369 		.ascii	"unsigned int\000"
 2020      676E6564 
 2020      20696E74 
 2020      00
 2021              	.LASF45:
 2022 0227 47656E65 		.ascii	"Generated_Source\\PSoC4\\Comm_I2C_INT.c\000"
 2022      72617465 
 2022      645F536F 
 2022      75726365 
 2022      5C50536F 
 2023              	.LASF7:
 2024 024d 6C6F6E67 		.ascii	"long long unsigned int\000"
 2024      206C6F6E 
 2024      6720756E 
 2024      7369676E 
 2024      65642069 
 2025              	.LASF26:
 2026 0264 436F6D6D 		.ascii	"Comm_slWrBufPtr\000"
 2026      5F736C57 
 2026      72427566 
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 54


 2026      50747200 
 2027              	.LASF16:
 2028 0274 63796973 		.ascii	"cyisraddress\000"
 2028      72616464 
 2028      72657373 
 2028      00
 2029              	.LASF20:
 2030 0281 72657370 		.ascii	"response\000"
 2030      6F6E7365 
 2030      00
 2031              	.LASF17:
 2032 028a 73697A65 		.ascii	"sizetype\000"
 2032      74797065 
 2032      00
 2033              	.LASF6:
 2034 0293 6C6F6E67 		.ascii	"long long int\000"
 2034      206C6F6E 
 2034      6720696E 
 2034      7400
 2035              	.LASF48:
 2036 02a1 436F6D6D 		.ascii	"Comm_I2CSlaveNackGeneration\000"
 2036      5F493243 
 2036      536C6176 
 2036      654E6163 
 2036      6B47656E 
 2037              	.LASF14:
 2038 02bd 63686172 		.ascii	"char\000"
 2038      00
 2039              	.LASF28:
 2040 02c2 436F6D6D 		.ascii	"Comm_slWrBufIndex\000"
 2040      5F736C57 
 2040      72427566 
 2040      496E6465 
 2040      7800
 2041              	.LASF35:
 2042 02d4 436F6D6D 		.ascii	"Comm_mstrControl\000"
 2042      5F6D7374 
 2042      72436F6E 
 2042      74726F6C 
 2042      00
 2043              	.LASF38:
 2044 02e5 436F6D6D 		.ascii	"Comm_mstrRdBufIndex\000"
 2044      5F6D7374 
 2044      72526442 
 2044      7566496E 
 2044      64657800 
 2045              	.LASF34:
 2046 02f9 436F6D6D 		.ascii	"Comm_mstrStatus\000"
 2046      5F6D7374 
 2046      72537461 
 2046      74757300 
 2047              	.LASF2:
 2048 0309 73686F72 		.ascii	"short int\000"
 2048      7420696E 
 2048      7400
 2049              	.LASF46:
 2050 0313 433A5C55 		.ascii	"C:\\Users\\Tech Consulting\\Desktop\\PSOC4 projects"
ARM GAS  C:\Users\TECHCO~1\AppData\Local\Temp\ccNXqVTW.s 			page 55


 2050      73657273 
 2050      5C546563 
 2050      6820436F 
 2050      6E73756C 
 2051 0342 5C537465 		.ascii	"\\Stepper Projects GearBest\\DualStepperController-"
 2051      70706572 
 2051      2050726F 
 2051      6A656374 
 2051      73204765 
 2052 0373 50536F43 		.ascii	"PSoC4200-GearBest.cydsn\000"
 2052      34323030 
 2052      2D476561 
 2052      72426573 
 2052      742E6379 
 2053              	.LASF4:
 2054 038b 6C6F6E67 		.ascii	"long int\000"
 2054      20696E74 
 2054      00
 2055              	.LASF0:
 2056 0394 7369676E 		.ascii	"signed char\000"
 2056      65642063 
 2056      68617200 
 2057              	.LASF32:
 2058 03a0 436F6D6D 		.ascii	"Comm_slRdBufIndexTmp\000"
 2058      5F736C52 
 2058      64427566 
 2058      496E6465 
 2058      78546D70 
 2059              	.LASF31:
 2060 03b5 436F6D6D 		.ascii	"Comm_slRdBufIndex\000"
 2060      5F736C52 
 2060      64427566 
 2060      496E6465 
 2060      7800
 2061              	.LASF30:
 2062 03c7 436F6D6D 		.ascii	"Comm_slRdBufSize\000"
 2062      5F736C52 
 2062      64427566 
 2062      53697A65 
 2062      00
 2063              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
